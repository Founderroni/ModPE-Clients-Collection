/*Thx goes to:
* Godsoft = He made the most thinks in minecraft Pe, without him, Modules like Aimaura, Esp, many utils would not exist.
* SonaxModz = For using the Esp of Blue Client.
* Verox & Dazab = For the beutiful LongJump they made.
* Verox = He gave me permission to use his velocity where the knockback is modify-able  !?
* Peacestorm = Vertex gave me very much information about Js, C++.
* !TheTracers = Reviewing my Client. Without him, I wouldn`t have the amount of subs.
* !Nsitf = Reviewing my Client. Without him, I wouldn`t have the amount of subs.
* ImYannic = Some Utils are from him
* */

//Copyright TimmYCode
//Skype: Timmyisda

var SmallMark = "";
var NormalMark = "";
var BigMark = "";

var ctx = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
var ambienmark = NormalMark;
var client = "§9Ambien §6×>§7 "; 
var version = "1.1";
var textsize = ctx.getWindowManager().getDefaultDisplay().getHeight() / 150;
var Button = android.widget.Button;
var LinearLayout = android.widget.LinearLayout;
var RelativeLayout = android.widget.RelativeLayout;
var PopupWindow = android.widget.PopupWindow;
var ScrollView = android.widget.ScrollView;
var TextView = android.widget.TextView;
var numbers = android.text.InputType.TYPE_CLASS_NUMBER;
var number = android.text.InputType.TYPE_NUMBER_FLAG_SIGNED;
var CheckBox = android.widget.CheckBox;
var Switch = android.widget.Switch;
var ImageView = android.widget.ImageView;
var EditText = android.widget.EditText;
var CompoundButton = android.widget.CompoundButton;
var SeekBar = android.widget.SeekBar;
var ProgressBar = android.widget.ProgressBar;
var ToggleButton = android.widget.ToggleButton;
var Toast = android.widget.Toast;
var FrameLayout = android.widget.FrameLayout;
var Typeface = android.graphics.Typeface;
var Color = android.graphics.Color;
var View = android.view.View;
var ColorDrawable = android.graphics.drawable.ColorDrawable;
var Gravity = android.view.Gravity;
var BitmapFactory = android.graphics.BitmapFactory;
var ViewGroup = android.view.ViewGroup;
var GradientDrawable = android.graphics.drawable.GradientDrawable;
var Bitmap = android.graphics.Bitmap;
var Canvas = android.graphics.Canvas;
var Paint = android.graphics.Paint;
var Path = android.graphics.Path;
var LinearGradient = android.graphics.LinearGradient;
var Shader = android.graphics.Shader;
var MotionEvent = android.view.MotionEvent;
var PorterDuff = android.graphics.PorterDuff;
var BitmapDrawable = android.graphics.drawable.BitmapDrawable;
var StateListDrawable = android.graphics.drawable.StateListDrawable;
var ViewTreeObserver = android.view.ViewTreeObserver;
var TranslateAnimation = android.view.animation.TranslateAnimation;
var Animation = android.view.animation.Animation;
var ClipDrawable = android.graphics.drawable.ClipDrawable;
var LightingColorFilter = android.graphics.LightingColorFilter;
var WindowManager = android.view.WindowManager;
var Environment = android.os.Environment;
var File = java.io.File;
var FileOutputStream = java.io.FileOutputStream;
var Runnable = java.lang.Runnable;
var Base64 = android.util.Base64;

var AlertDialog = {
    Builder: function() {
        return android.app.AlertDialog.Builder;
    }
}

var DialogInterface = android.content.DialogInterface;
var DataOutputStream = java.io.DataOutputStream;
var BufferedReader = java.io.BufferedReader;
var Thread = java.lang.Thread;
var TypedValue = android.util.TypedValue;
var Byte = java.lang.Byte;
var Animation = android.view.animation.Animation;
var Context = android.content.Context;
var Handler = android.os.Handler;
var TextWatcher = android.text.TextWatcher;
var FileWriter = java.io.FileWriter;
var InputStreamReader = java.io.InputStreamReader;
var SpannableStringBuilder = android.text.SpannableStringBuilder;
var ImageSpan = android.text.style.ImageSpan;
var Spannable = android.text.Spannable;
var StringBuffer = java.lang.StringBuffer;
var Html = android.text.Html;
var ZipFile = java.util.zip.ZipFile;
var ByteBuffer = java.nio.ByteBuffer;
var MediaPlayer = android.media.MediaPlayer;
var String = java.lang.String;
var StringBuilder = java.lang.StringBuilder;
var printWriter = java.io.printWriter;
var Intent = android.content.Intent;
var Uri = android.net.Uri;


//closes
var ambienclosed = false;
var playerbarclosed = false;
var playerbtnclosed = false;
var combatbarclosed = false;
var combatbtnclosed = false;
var movementbarclosed = false;
var movementbtnclosed = false;
var renderbarclosed = false;
var renderbtnclosed = false;
var otherbarclosed = false;
var otherbtnclosed = false;

//tabsmove

var playerwidth = ctx.getWindowManager().getDefaultDisplay().getWidth()/2.2;
var playerheight = ctx.getWindowManager().getDefaultDisplay().getHeight()/3.0;

var movementwidth = 0;
var movementheight = ctx.getWindowManager().getDefaultDisplay().getHeight()/5.5;

var combatwidth = ctx.getWindowManager().getDefaultDisplay().getWidth()/2.2;
var combatheight = ctx.getWindowManager().getDefaultDisplay().getHeight()/3.0;

var renderwidth = ctx.getWindowManager().getDefaultDisplay().getWidth()/7;
var renderheight = ctx.getWindowManager().getDefaultDisplay().getHeight()/5.5;

var otherwidth = ctx.getWindowManager().getDefaultDisplay().getWidth()/7;
var otherheight = ctx.getWindowManager().getDefaultDisplay().getHeight()/5.5;

//colours
var DarkBlue = "§1";
var DarkGreen = "§2";
var DarkAqua = "§3";
var DarkRed = "§4";
var DarkPurple = "§5";
var Gold =  "§6";
var Gray = "§7";
var DarkGray= "§8";
var Blue = "§9";
var Black = "§0";
var Aqua = "§b";
var Green = "§a";
var Red = "§c";
var LightPurple = "§d";
var Yellow = "§e";
var White = "§f";

//client variables
var menuScroll = null;
var menuScroll2 = null;
var moving = false;
var premium = false;
var percent = 0;
var playerDir = [0, 0, 0];
var mobDir = [0, 0, 0];
var DEG_TO_RAD = Math.PI / 180;
var s = 1;
var Xpos = 0;
var Zpos = 0;
var dx = 0;
var dy = 0;
var mPosX = 0;
var mPosY = 0;
var blocks = 0;
var curPosY;
var Versionv;
var Linkversion;
var glidemotion = -0.000000000001;
var ladderspeed = 0.5;
var attackTick = 0;
var nothing = false;
var counttimee = false;
var hitboxtimer = 0;
var teams = false;
var onehit = false;
var yposi;
var onehit2 = false;
var pname = Player.getName();
var firstabg = 0;
var testtick = 0;
var secondagb = 76;
var thirdabg = 255;
var curspeed;
var aimaura = false;
var infinityreach = false;
var aurarange = 6;
var glidejump = 4;
var hitbox = false;
var scaffoldtick = false;
var velocity = false;
var banitem = false;
var jumpboost = 1.9;
var longjump = false;
var tbtnclosed = false;
var brightness = false;
var yaw;
var playeresp = false;
var teamvalue;
var GUIwatermark;
var jesus = false;
var step = false;
var derp = false;
var chestclick = false;
var stime = 30;
var stime2 = 30;
var ambienspam = "Spam";
var blockfinder = false;
var blockfinderid = 0;
var bypassspam = true;
var teleportpad = false;
var normalspam = false;
var spammer = false;
var nofall = false;
var fastladder = false;
var namehide = false;
var nametag = "Unknow";
var adreeclosed = true;
var safewalk = false;
var glide = false;
var nodownglide = true;
var lbsgglide = false;
var glidemotion = -0.000000000001;
var timee = 100;
var scaffold = false;
var tower = false;
var blocks = 10;
var speed = false;
var speedmotion = true
var speedjump = false;
var speedhop = false;
var antieffects = false;
var infinityplayer = "";
var trylag = false;
var tptick = 0;
var mspeed = 1.3;
var bhoptime = 5;
var falltimer = 10;
var teleport = false;
var swordhit = false;
var swordtick = 0;
var Linkversion;
var setthat;
var showtp = false;
var Versionv;
var Changelogtxt;
var deviceid;
var ambienclosed2 = false;

//times
var minutes = 1000 * 60;
var hours = minutes * 60;
var days = hours * 24;
var years = days * 365;
var d = new Date();
var t = d.getTime();

var m = Math.round(t / minutes);
var h = Math.round(t / hours);
var d = Math.round(t / days);
var y = Math.round(t / years);

var runOnUiThread = function(func) {
	ctx.runOnUiThread(new Runnable({
		run: function() {
			try {
				func(ctx);
			}catch(err) {
				print(" ");
			}
		}
	}));
};

var dismissView = function(view) {
    runOnUiThread(function(ctx) {
        if(view != null) {
            view.dismiss();
            view = null;
        }
    });
}



var spamfile = new java.io.File(ambienfiles, "ambientext.txt");

if(spamfile.exists()) {
    ambienspam = getTextFromFile(new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/minecraftpe/ambien/", "ambientext.txt"));
}


function toDirectionalVector(vector, yaw, pitch) {

    vector[0] = Math.cos(yaw) * Math.cos(pitch);
    vector[1] = Math.sin(pitch);
    vector[2] = Math.sin(yaw) * Math.cos(pitch);
}

var archive = new java.io.File(new android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/minecraftpe" + "/ambien");

var ambienfiles = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/minecraftpe/ambien/";

var markfile = new java.io.File(ambienfiles, "markfile.txt");

var textsizefile = new java.io.File(ambienfiles, "textsize.txt");

var ambientext = new java.io.File(ambienfiles, "ambientext.txt");

function markfileCheck() {
if(markfile.exists()) {

java.io.File(ambienfiles).mkdirs();
                markfile.createNewFile();
                var write = new java.io.OutputStreamWriter(new java.io.FileOutputStream(markfile));
                write.append(ambienmark);
write.close();

        ambienmark = getTextFromFile(new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/minecraftpe/ambien/", "markfile.txt"));
}

if(!markfile.exists()) {       

                java.io.File(ambienfiles).mkdirs();
                markfile.createNewFile();
                var write = new java.io.OutputStreamWriter(new java.io.FileOutputStream(markfile));
                write.append(ambienmark);
write.close();
}             
}

function textsizefileCheck() {
if(textsizefile.exists()) {
        textsize = getTextFromFile(new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/minecraftpe/ambien/", "textsize.txt"));
}

if(!textsizefile.exists()) {       
                java.io.File(ambienfiles).mkdirs();
                textsizefile.createNewFile();
                var write = new java.io.OutputStreamWriter(new java.io.FileOutputStream(textsizefile));
                write.append(textsize.toString());
write.close();
}             
}

function updateCheck() {
try {
    var url = new java.net.URL("https://pastebin.com/raw/2dzi0zYJ");
    var url2 = new java.net.URL("https://goo.gl/iUPssC");

    var connection = url.openConnection();
    var inputStream = connection.getInputStream();
    var bufferedReader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream));

    var connection2 = url2.openConnection();
    var inputStream2 = connection2.getInputStream();
    var bufferedReader2 = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream2));

    Linkversion = bufferedReader.readLine();
    Versionv = bufferedReader2.readLine();    

    if(Versionv != version) {
        UpdateDialog();
 } 
} catch(err) {

}
}

function UpdateDialog() {
ctx.runOnUiThread(new Runnable({ run: function(){
        try{
            var udialog = new android.widget.LinearLayout(ctx);
            udialog.setOrientation(android.widget.LinearLayout.VERTICAL);
            var otherg = new Button(ctx);
            otherg.setText("Update\n\n\n\n" + "Current Version: " + version + "\n" + "New Version: " +   Versionv + "\n\n\n");
            otherg.setTextColor(Color.BLACK);
            otherg.setBackground(bttheme);
            otherg.getBackground().setAlpha(130);
            otherg.setGravity(Gravity.CENTER);
            otherg.setOnClickListener(new View.OnClickListener({
                onClick: function(viewarg){
                    ugui.dismiss();
                    
ctx.runOnUiThread(new Runnable({ run: function(){
var openus = new android.content.Intent(ctx);
                    openus.setAction(android.content.Intent.ACTION_VIEW);
                    openus.setData(android.net.Uri.parse(Linkversion));
                    ctx.startActivity(openus);
}}));

                }}));
            udialog.addView(otherg, ctx.getWindowManager().getDefaultDisplay().getWidth()/1.5, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.9);

            ugui = new android.widget.PopupWindow(udialog, ctx.getWindowManager().getDefaultDisplay().getWidth()/1.5, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.9);
            ugui.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
           ugui.setAnimationStyle(android.R.style.Animation_Toast);
 ugui.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);
        }catch(err){
            print(err);
        }
    }}));
}

function premiumCheck() {
try{
    var url = new java.net.URL("https://pastebin.com/raw/ve3RjTrh");
    
    var connection = url.openConnection();
    var inputStream = connection.getInputStream();
    var bufferedReader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream));
var line = "";
while((line = bufferedReader.readLine()) != null) {
var linetxt = line;
if(linetxt.includes(ctx.getDeviceId())) {
premium = true;
}
}
if(premium == true) {
ModPE.langEdit("menu.copyright", "§aPremium Account");
}else{
ModPE.langEdit("menu.copyright", "§4No Premium Account");
}
}catch(err){
error("Cant connect to Premium- Database");
ModPE.langEdit("menu.copyright", "§eNo Connection");
}
}


function useItem(x, y, z, item, tile, side) {
    if(tower == true) {
        Entity.setPosition(getPlayerEnt(), Player.getX(), Player.getY()+1, Player.getZ());
    }
if(scaffold) {
        if(Player.getCarriedItem() !=0) {
if(Entity.getPitch(getPlayerEnt()) <= 80) {
            scaffoldtick = true;
}
    }
 
if(tile == 63 || tile == 68) {

Level.setSignText(x, y, z, 0, "Kake");
}
}
if(blockfinder) {
var blockx = x;
var blocky = y;
var blockz = z;
for(i = 0; i < 100; i++) {
if(getTile(blockx, blocky-i, blockz) == blockfinderid) {
clientMessage(client + "Found the block at§9 Y:"+ i);
clientMessage(client + "Current height§9 Y:"+ blocky);
clientMessage("                            ");
}
if(getTile(blockx, blocky-i, blockz) == blockfinderid) {
clientMessage(client + "Found the block at§9 Y:"+ i);
clientMessage(client + "Current height§9 Y:"+ blocky);
clientMessage("                            ");
}
}
}
}

//code by Peacestorm!!!!
function copyText(text) {
    runOnUiThread(function(ctx) {
var clipboard = ctx.getSystemService(ctx.CLIPBOARD_SERVICE);
var clip = android.content.ClipData.newPlainText("label", text);
	clipboard.setPrimaryClip(clip);
    });
}
//code by Peacestorm!!!!

var Utils = {
Render: {
			getFloatBuffer: function (fArray) {
				let bBuffer = java.nio.ByteBuffer.allocateDirect(fArray.length * 4);
				bBuffer.order(java.nio.ByteOrder.nativeOrder());
				let fBuffer = bBuffer.asFloatBuffer();
				fBuffer.put(fArray);
				fBuffer.position(0);
				return fBuffer;
			},
			getShortBuffer: function (sArray) {
				let bBuffer = java.nio.ByteBuffer.allocateDirect(sArray.length * 2);
				bBuffer.order(java.nio.ByteOrder.nativeOrder());
				let sBuffer = bBuffer.asShortBuffer();
				sBuffer.put(sArray);
				sBuffer.position(0);
				return sBuffer;
			},
			renderer: null,
			glSurface: null,
			fov: 90,		
    color: android.graphics.Color.argb(100, firstabg, secondagb, thirdabg),
			initted: false,
			init: function () {
				if(Utils.Render.initted)
					return;
				let options = getTextFromFile(new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/minecraftpe/", "options.txt"));
				options = options.split("\n");
				options.forEach(function (entry) {
					let suboption = entry.split(":");
					if(suboption[0] == "gfx_field_of_view") {
						Utils.Render.fov = suboption[1];
					}
				});
				this.renderer = new android.opengl.GLSurfaceView.Renderer({
					onSurfaceCreated: function (gl, config) {
						let GL10 = javax.microedition.khronos.opengles.GL10;
						gl.glClearColor(0, 0, 0, 0);
						gl.glShadeModel(GL10.GL_SMOOTH);
						gl.glClearDepthf(1.0);
						gl.glDisable(GL10.GL_DITHER);
						gl.glEnable(GL10.GL_DEPTH_TEST);
						gl.glDepthFunc(GL10.GL_LEQUAL);
						gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, GL10.GL_NICEST);
					},
					onSurfaceChanged: function (gl, width, height) {
						let GL10 = javax.microedition.khronos.opengles.GL10;
						gl.glMatrixMode(GL10.GL_PROJECTION);
						gl.glLoadIdentity();
						android.opengl.GLU.gluPerspective(gl, Utils.Render.fov, width / height, 0.1, 100);
						gl.glMatrixMode(GL10.GL_MODELVIEW);
						gl.glLoadIdentity();
					},
					onDrawFrame: function (gl) {
						
						let GL10 = javax.microedition.khronos.opengles.GL10;
						gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
						gl.glLoadIdentity();
						
						if(playeresp == true &&	 getPlayerEnt() != -1) {
							try {
								
								gl.glDisable(GL10.GL_LIGHTING);
								let yaw = getYaw() % 360;
								let pitch = getPitch() % 360;
								let eyeX = getPlayerX();
								let eyeY = getPlayerY() + 1;
								let eyeZ = getPlayerZ();

								let dCenterX = Math.sin(yaw / 180 * Math.PI);
								let dCenterZ = Math.cos(yaw / 180 * Math.PI);
								let dCenterY = Math.sqrt(dCenterX * dCenterX + dCenterZ * dCenterZ) * Math.tan((pitch - 180) / 180 * Math.PI);

								let centerX = eyeX - dCenterX;
								let centerZ = eyeZ + dCenterZ;
								let centerY = eyeY - dCenterY;
								android.opengl.GLU.gluLookAt(gl, eyeX, eyeY, eyeZ, centerX, centerY, centerZ, 0, 1.0, 0);
								let mobs = Entity.getAll();
								let players = Server.getAllPlayers();
								mobs.forEach(function (entry) {
				
									if(entry != getPlayerEnt() && Entity.getEntityTypeId(entry) == EntityType.PLAYER) {
										Utils.Render.drawBox(gl, Entity.getX(entry) - 0.5, Entity.getY(entry) - 0.5, Entity.getZ(entry) - 0.5, 1, 2, 1);
									}
								});
								players.forEach(function (entry) {				
									if(entry != getPlayerEnt() && Entity.getEntityTypeId(entry) == EntityType.PLAYER) {
										Utils.Render.drawBox(gl, Entity.getX(entry) - 0.5, Entity.getY(entry) - 0.5, Entity.getZ(entry) - 0.5, 1, 2, 1);
									}
								});								
							} catch(e) {
								clientMessage("RenderProblem: " + e);
							}
						} else {						
						}
					}
				});
				ctx.runOnUiThread(new java.lang.Runnable({
					run: function () {
						Utils.Render.glSurface = new android.opengl.GLSurfaceView(ctx);
						Utils.Render.glSurface.setZOrderOnTop(true);
		 	  //Utils.Render.glSurface.setEGLConfigChooser(5, 6, 5, 0, 16, 0);
		  	 Utils.Render.glSurface.setEGLConfigChooser(8, 8, 8, 8, 16, 0);	Utils.Render.glSurface.getHolder().setFormat(android.graphics.PixelFormat.TRANSLUCENT);
						Utils.Render.glSurface.setRenderer(Utils.Render.renderer);
						Utils.Render.glSurface.setRenderMode(1);
						ctx.getWindow().getDecorView().addView(Utils.Render.glSurface);
						Utils.Render.initted = true;
					}
				}));
			},
			drawBox: function (gl, x, y, z, xsize, ysize, zsize) {			
				let GL10 = javax.microedition.khronos.opengles.GL10;
				let size = new Array(xsize, ysize, zsize);
				let vertices = [
					0, 0, 0,
					size[0], 0, 0,
					0, 0, size[2],
					size[0], 0, size[2],
  				0, size[1], 0,
					size[0], size[1], 0,
					0, size[1], size[2],
					size[0], size[1], size[2]
				];
				let vertexBuffer = Utils.Render.getFloatBuffer(vertices);
				let lineIndices = [
					0, 1,
					0, 2,
					0, 4,

					3, 1,
					3, 2,
					3, 7,

					5, 4,
					5, 7,
					5, 1,

					6, 4,
					6, 7,
					6, 2
				];
				let polyIndices = [
					0, 1, 4,
					1, 4, 5,

					2, 3, 6,
					7, 6, 3,

					1, 3, 7,
					7, 1, 5,

					0, 2, 6,
					6, 0, 4,

					0, 1, 2,
					3, 1, 2,

					4, 5, 6,
					7, 5, 6
				];
				let lineBuffer = Utils.Render.getShortBuffer(lineIndices);
			let polyBuffer = Utils.Render.getShortBuffer(polyIndices);
			gl.glTranslatef(x, y, z);
			gl.glFrontFace(GL10.GL_CCW);
			gl.glEnable(GL10.GL_BLEND);
			//gl.glEnable(GL10.GL_LINE_SMOOTH);
			gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
			gl.glLineWidth(4);
			gl.glColor4f(android.graphics.Color.red(Utils.Render.color) / 255, android.graphics.Color.green(Utils.Render.color) / 255, android.graphics.Color.blue(Utils.Render.color) / 255, 0.7);
			gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
			gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
			gl.glDrawElements(GL10.GL_LINES, lineIndices.length, GL10.GL_UNSIGNED_SHORT, lineBuffer);
			gl.glColor4f(android.graphics.Color.red(Utils.Render.color) / 255, android.graphics.Color.green(Utils.Render.color) / 255, android.graphics.Color.blue(Utils.Render.color) / 255, 0.2);
			gl.glDrawElements(GL10.GL_TRIANGLES, polyIndices.length, GL10.GL_UNSIGNED_SHORT, polyBuffer);
			gl.glDisable(GL10.GL_LINE_SMOOTH);
			gl.glTranslatef(-x, -y, -z);
		},
		drawLine: function (gl, x, y, z, x2, y2, z2) {
			if (!tracers1) return;
			let GL10 = javax.microedition.khronos.opengles.GL10;
			let size = new Array(x2, y2, z2);
			let vertices = [
				0, 0, 0,
				x2 - x, y2 - y, z2 - z
			];
			let vertexBuffer = Utils.Render.getFloatBuffer(vertices);
			let indices = [
				0, 1
			];
			let indexBuffer = Utils.Render.getShortBuffer(indices);
			gl.glTranslatef(x, y, z);
			gl.glEnable(GL10.GL_BLEND);
			gl.glDepthMask(false);
			//gl.glEnable(GL10.GL_LINE_SMOOTH);
			gl.glBlendFunc(GL10.GL_SRC_ALPHA, GL10.GL_ONE_MINUS_SRC_ALPHA);
			gl.glLineWidth(4);
			gl.glColor4f(android.graphics.Color.red(Utils.Render.color) / 255, android.graphics.Color.green(Utils.Render.color) / 255, android.graphics.Color.blue(Utils.Render.color) / 255, 0.7);
			gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
			gl.glVertexPointer(3, GL10.GL_FLOAT, 0, vertexBuffer);
			gl.glDrawElements(GL10.GL_LINES, indices.length, GL10.GL_UNSIGNED_SHORT, indexBuffer);
			gl.glTranslatef(-x, -y, -z);
			gl.glDepthMask(true);
			gl.glDisable(GL10.GL_LINE_SMOOTH);
			}
		},
   Block: {
		isLiquid: function(id) {
			if (id >= 8 && id <= 11) return true;
			return false;
		},
		isLadder: function(id) {
			if (id = 65) return true;
			return false;
		},
		isWeb: function(id) {
			if (id = 30) return true;
			return false;
		},
		isIce: function(id) {
		if (id = 79 && id = 174) return true;
		return false;
		}
	},

	Player: {
isJumping: function() {
		var velo = 0.33319997787475586;
		if(Entity.getVelY(Player.getEntity()) == velo) return true;
		return false;
},
isFall: function() {
		var velo = -0.07840000092983246;
		if(!Utils.Player.onGround() && Entity.getVelY(Player.getEntity()) < velo) return true;
		return false;
},
onGround2: function() {
		var velo2 = -0.07840000092983246;
		if(Entity.getVelY(Player.getEntity()) ==  velo2) return true;
		return false;
},
		isInWater: function(){
			if(Utils.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 0.01, getPlayerZ())))return true;
			return false;
		},
isAtEdge: function(){
			if(getTile(getPlayerX()+0.0001, getPlayerY()-2, getPlayerZ()+0.0001) == 0 ||
       getTile(getPlayerX()-0.0001, getPlayerY()-2, getPlayerZ()-0.0001) == 0 ||
       getTile(getPlayerX()+0.0001, getPlayerY()-2, getPlayerZ()-0.0001) == 0 ||
       getTile(getPlayerX()-0.0001, getPlayerY()-2, getPlayerZ()+0.0001) == 0)return true;
			return false;
		},
		isOnWater: function(){
		if(Utils.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 1.3, getPlayerZ())))return true;
		return false;
		},
		isOnIce: function(){
		if(Utils.Block.isIce(getTile(getPlayerX(), getPlayerY() - 0.1, getPlayerZ())))return true;
		return false;
		},
isInWeb: function(){
		if(Utils.Block.isWeb(getTile(getPlayerX(), getPlayerY()+0.1, getPlayerZ())))return true;
		return false;
		},
		isOnLadder: function(){
		if(Utils.Block.isLadder(getTile(getPlayerX(), getPlayerY() + 0.1, getPlayerZ())))return true;
		return false;
		},
		onGround: function() {
			var y = getPlayerY();
			while (y > 1) y -= 1;

			if (Math.round(y * 100) == 62 && getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()) != 0 && !Utils.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()))) return true;
			if (Math.round(y * 100) == 12 && getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()) != 0 && !Utils.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 1.65, getPlayerZ()))) return true;
			return false;
		},
isMoving: function() {
moving = Player.getX();
if(moving != 0) {
moving--;
}
if(moving == 0) {
if(Player.getX != moving) {
moving = 10;
}
}

},

		overGround: function() {
			var y = getPlayerY();
			while (y > 2) y -= 2;

			if (Math.round(y * 100) == 62 && getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()) != 0 && !Utils.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()))) return true;
			if (Math.round(y * 100) == 12 && getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()) != 0 && !Utils.Block.isLiquid(getTile(getPlayerX(), getPlayerY() - 2.15, getPlayerZ()))) return true;
			return false;
		},
		isCollidedHorizontally: function() {
			var x = getPlayerX();
			var z = getPlayerZ();
			var blockX = Math.round(x - 0.5);
			var blockZ = Math.round(z - 0.5);
			while (x < 1) x += 1;
			while (z < 1) z += 1;
			while (x > 1) x -= 1;
			while (z > 1) z -= 1;

			if (Math.round(x * 100) == 31) x -= 0.01;
			if (Math.round(z * 100) == 31) z -= 0.01;
			if (Math.round(x * 100) == 69) x += 0.01;
			if (Math.round(z * 100) == 69) z += 0.01;
			if (Math.round(x * 100) == 30) blockX--;
			if (Math.round(z * 100) == 30) blockZ--;
			if (Math.round(x * 100) == 70) blockX++;
			if (Math.round(z * 100) == 70) blockZ++;
			//clientMessage(blockX+";"+blockZ);
			if (getTile(blockX, getPlayerY(), blockZ) == 0 && getTile(blockX, getPlayerY() - 1, blockZ) == 0) return false;

			if (Block.getDestroyTime(getTile(blockX, getPlayerY() - 1, blockZ)) <= 0.1 && Block.getDestroyTime(getTile(blockX, getPlayerY(), blockZ)) <= 0.1) return false;

			if (Math.round(x * 100) == 30 || Math.round(x * 100) == 70) return true;
			if (Math.round(z * 100) == 30 || Math.round(z * 100) == 70) return true;
			return false;
		},
Entity: {
	getAll: function () {
			return Utils.Entity.allEntitys;
		},
bowAimAt: function (ent) {
			var velocity = 1;
			var posX = Entity.getX(ent) - Player.getX();
			var posY = Entity.getEntityTypeId(ent) == EntityType.PLAYER ? Entity.getY(ent) - Player.getY() : Entity.getY(ent) + 1 - Player.getY();
			var posZ = Entity.getZ(ent) - Player.getZ();
			var yaw = (Math.atan2(posZ, posX) * 180 / Math.PI) - 90;
			var y2 = Math.sqrt(posX * posX + posZ * posZ);
			var g = 0.007;
			var tmp = (velocity * velocity * velocity * velocity - g * (g * (y2 * y2) + 2 * posY * (velocity * velocity)));
			var pitch = -(180 / Math.PI) * (Math.atan((velocity * velocity - Math.sqrt(tmp)) / (g * y2)));
			if(pitch < 89 && pitch > -89) {
				setRot(Player.getEntity(), yaw, pitch);
			}

		},
allEntitys: new Array(),

		aimAt: function(x, y, z) {
			// Credits to Godsoft029 aka the developer of DragOP
			var velocity = 1;
			var posX = x - getPlayerX();
			var posY = y - getPlayerY();
			var posZ = z - getPlayerZ();
			var realYaw = (Math.atan2(posZ, posX) * 180 / Math.PI) - 90;
			var y2 = Math.sqrt(posX * posX + posZ * posZ);
			var g = 0.007;
			var tmp = (velocity * velocity * velocity * velocity - g * (g * (y2 * y2) + 2 * posY * (velocity * velocity)));
			var pitch = -(180 / Math.PI) * (Math.atan((velocity * velocity - Math.sqrt(tmp)) / (g * y2)));
			
			if(pitch < 89 && pitch > -89) {

				oldYaw = newYaw;
				newYaw = realYaw;
				var dist = Math.sqrt(Math.pow(posX, 2) + Math.pow(posY, 2) + Math.pow(posZ, 2));
				yaw = realYaw+(newYaw - oldYaw) * (dist*dist/dist)/(120/45);
				Entity.setRot(getPlayerEnt(), yaw, pitch);
			}
		},
		isOnGround: function(ent) {
			for(i = 0;i < ent.length;i++) {
			var y = Entity.getY(ent[i]);
			while (y > 1) y -= 1;

			if (Math.round(y * 100) == 62 && getTile(Entity.getX(ent[i]), Entity.getY(ent[i]) - 1.65, Entity.getZ(ent[i])) != 0 && !Utils.Block.isLiquid(getTile(Entity.getX(ent[i]), Entity.getY(ent[i]) - 1.65, Entity.getZ(ent[i])))) return true;
			if (Math.round(y * 100) == 12 && getTile(Entity.getX(ent[i]), Entity.getY(ent[i]) - 1.65, Entity.getZ(ent[i])) != 0 && !Utils.Block.isLiquid(getTile(Entity.getX(ent[i]), Entity.getY(ent[i]) - 1.65, Entity.getZ(ent[i])))) return true;
			return false;
			}
}
}
}
		};

ModPE.getFromUrl = function(url, errs){
	errs = 0 || errs;
	try {
		var url = new java.net.URL(url);
		var connection = url.openConnection();
		var inputStream = connection.getInputStream();
		var data = "";
		var bufferedReader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream));
		var line = "";
		while((line = bufferedReader.readLine()) != null){
			data += line + "\n";
		}
		var result = data.toString();
		bufferedReader.close();
	} catch(err) {
		result = (errs ? "Getting URL Failed. Error: " + err : 0);
		print("Error ModPE.ajax(): " + err);
	} finally {
		if(result == null || result == undefined){
			result = (errs ? "Result is null" : 0);
		}
	}
	return result;
};

ModPE.JSON = {
  parse: function(str){
    return Function("return " + str)();
  }
};

var myServerStatus = {
    set: function(ip, port){
	    port = 19132 || port;
        this.ip = ip;
        this.port = port;
        this.connect();
        return this;
    },
    update: function(){
      if(this.ip !== null && this.port !== null){
        this.connect();
      }
    },
    connect: function(){
        var data = ModPE.getFromUrl("http://serverstatus.ml/info.php?address=" + this.ip + ":" + this.port);

        if(data != false){
            myServerStatus.json = ModPE.JSON.parse(data);
            myServerStatus.setVariables();
        }
        return true;
    },
    setVariables: function(){
        this.status = this.json["status"];
        this.name = this.json["name"];
        this.address = this.json["address"];
        this.version = this.json["version"];
        this.software = this.json["software"];
        this.online = this.json["online"];
        this.list = this.json["players"];
        this.plugins = this.json["plugins"];
    }
};
        
function getNearestEntity(maxrange) {
    var players = Server.getAllPlayers();
    var small = maxrange;
    var ent = null;
    for (var i = 0; i < players.length; i++) {
        var x = Entity.getX(players[i]) - getPlayerX();
        var y = Entity.getY(players[i]) - getPlayerY();
        var z = Entity.getZ(players[i]) - getPlayerZ();
        var entnametag = Entity.getNameTag(players[i]);
        var dist = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
        if (dist < small && dist > 0 && Entity.getHealth(players[i]) >= 1) {

if(teams == true) {
pcolor = Entity.getNameTag(Player.getEntity()).charAt(1).toString();
ecolor = entnametag.charAt(1).toString();

if(pcolor == ecolor || entnametag == "§eBuy §lhere§r§e!") {
return;
}
}

            small = dist;
            ent = players[i];

        }
    }
    return ent;
}

var Launcher = {
isToolbox: function () {
return ctx.getPackageName() == "io.mrarm.mctoolbox";
 },
isBlockLauncher: function () {
		return(ctx.getPackageName() == "net.zhuoweizhang.mcpelauncher" || ctx.getPackageName() == "net.zhuoweizhang.mcpelauncher.pro");
	}
};

function getTextFromFile(file) {

    var readed = (new java.io.BufferedReader(new java.io.FileReader(file)));
    var data = new java.lang.StringBuilder();
    var string;
    while((string = readed.readLine()) != null)
        data.append(string + "\n");
    return data.toString();
}


function aimAtEnt(ent, pos){
if(ent!=null){

var playerX=Entity['getX'](ent)-getPlayerX();
var playerY=Entity['getY'](ent)-getPlayerY();
var playerZ=Entity['getZ'](ent)-getPlayerZ();

if(pos!=null&&posinstanceofArray){

playerX=Entity['getX'](ent)-pos[0];
playerY=Entity['getY'](ent)-pos[1];
playerZ=Entity['getZ'](ent)-pos[2];

}

var playerID = "63";
if(Entity['getEntityTypeId'](ent)!=playerID)playerY+=0.5;

var an0x7a=Entity['getX'](ent)+0.5;
var hsd0x7nul1=Entity['getY'](ent);
var d4tla5h=Entity['getZ'](ent)+0.5;
var len=Math['sqrt'](playerX*playerX+playerY*playerY+playerZ*playerZ);

var playerY=playerY/len;var screen1=Math['asin'](playerY);

screen1=screen1*180.0/Math['PI'];
screen1=-screen1;

var screen2=-Math['atan2'](an0x7a-(Player['getX']()+0.5),d4tla5h-(Player['getZ']()+0.5))*(180/Math['PI']);

if(screen1<89&&screen1>-89){Entity['setRot'](Player['getEntity'](),screen2,screen1);
}
}
};				

function newLevel() {
if(Server.getAddress() == ""|| Server.getAddress() == null) {
clientMessage(client + "Keep in mind that the most thinks are only working in multiplayer");
}else{
clientMessage(client + "Type §9#help §7for more Options");
}
}

//Cmd System

var prefix = "#";


function chatHook(text) {
var split = text.split(" ");

if(text == prefix + "help"){
preventDefault();
clientMessage("                                             ");
clientMessage("\n" + client + "Help §e1/2");
clientMessage(client + "#additem §9[itemid] [amount]");
clientMessage(client + "#longjump §9[value]");
clientMessage(client + "#info §9[IP, Port]");
clientMessage(client + "#watermark §9[small, normal, big]");
clientMessage(client + "#textsize §9[number]");
clientMessage(client + "#spammode §9[custom, bypass]");
clientMessage(client + "#spamdelay §9[ticks]");
clientMessage(client + "#velocityknock §9[0-100%]");
clientMessage(client + "#blockfinder §9[Block ID]");
}

if(text == prefix + "help 2"){
preventDefault();
clientMessage("                                             ");
clientMessage("\n" + client + "Help §e2/2");
clientMessage(client + "#spamtext §9[text (normal mode)]");
clientMessage(client + "#nametag §9[name]");
clientMessage(client + "#glidemode §9[nodown, lbsg]");
clientMessage(client + "#glidemotion §9[value]");
clientMessage(client + "#speedmode §9[motion, jump, hop]");
clientMessage(client + "#jesusmode §9[normal]");
clientMessage(client + "#copyip");
clientMessage(client + "#tpradius §9[blocks]");
}

    if(split[0] == prefix + "additem") {
        preventDefault();
        clientMessage(client + "The Item is in your boots slot");
         var itemID = split[1];
        var itemAmount = split[2];
        Player.setArmorSlot(3, itemID, itemAmount);
}

if(split[0] == prefix + "cm") {
        preventDefault();       
         clientMessage(text.replace("#cm ",""));
}

if(split[0] == prefix + "banitem") {
        preventDefault(); 
clientMessage(client + "Only working on Brlns");
banitem = true;
Player.addItemInventory(116, 1, 1);
Player.addItemInventory(276, 1, 1);
}

if(split[0] == prefix + "onehit") {
        preventDefault();       
Player.addItemInventory(267, 1, 1);
for(i = 0; i < 9; i++) {
if(Player.getInventorySlot(i) == "267") {
Player.enchant(i, Enchantment.SHARPNESS, 10000);
Player.setItemCustomName(i, "Ghost Item");
clientMessage(client + "Place the iron-sword in a chest and then destroy it"); 
onehit = true;
}else{

}
}        
}

if(split[0] == prefix + "sm") {
        preventDefault();       
         Server.sendChat(text.replace("#sm ",""));
}

if(text.match("@all")) {
preventDefault();
var players = Server.getAllPlayers();
for(i = 0; i < players.length; i++) {
Server.sendChat(text.replace("@all", Player.getName(players[i])));
}
}

if(split[0] == prefix + "tpradius"){
preventDefault();
clientMessage(client + "Teleport radius set to:§9 " + split[1]);
blocks = split[1];
}

if(split[0] == prefix + "fly"){
preventDefault();

if(split[1] == "on") {
Player.setCanFly(true);
clientMessage(client + "Fly Activated");
}
if(split[1] == "off") {
Player.setCanFly(false);
clientMessage(client + "Fly deactivated");
}
}

if(split[0] == prefix + "blockfinder"){
preventDefault();
clientMessage(client + "Blockfinder ID set to:§9 " + split[1]);
blockfinderid = split[1];
}

if(split[0] == prefix + "longjump"){
preventDefault();
clientMessage(client + "Longjump motion set to:§9 " + split[1]);
jumpboost = split[1];
}

if(split[0] == prefix + "velocityknock"){
preventDefault();
clientMessage(client + "Velocity-Knock set to:§9 " + split[1] + "%");
percent = split[1];
}

if(split[0] == prefix + "watermark"){
preventDefault();

        if(split[1] == "small") {
ambienmark = SmallMark;
java.io.File(ambienfiles).mkdirs();

                markfile.createNewFile();
                var write = new java.io.OutputStreamWriter(new java.io.FileOutputStream(markfile));
                write.append(ambienmark);
write.close();
clientMessage(client + "Changed ambienmark to: §9small");
if(ambienclosed == true) {
refreshClient();
}
    }
if(split[1] == "normal") {
ambienmark = NormalMark;
java.io.File(ambienfiles).mkdirs();
                markfile.createNewFile();
                var write = new java.io.OutputStreamWriter(new java.io.FileOutputStream(markfile));
                write.append(ambienmark);
write.close();
clientMessage(client + "Changed ambienmark to: §9normal");
if(ambienclosed == true) {
refreshClient();
}
    }
if(split[1] == "big") {
ambienmark = BigMark;
java.io.File(ambienfiles).mkdirs();
                markfile.createNewFile();
                var write = new java.io.OutputStreamWriter(new java.io.FileOutputStream(markfile));
                write.append(ambienmark);
write.close();
clientMessage(client + "Changed ambienmark to: §9big");
if(ambienclosed == true) {
refreshClient();
}
    }
}

if(split[0] == prefix + "textsize"){
preventDefault();
clientMessage(client + "Textsize set to:§9 " + split[1]);
textsize = split[1];
java.io.File(ambienfiles).mkdirs();
                textsizefile.createNewFile();
                var write = new java.io.OutputStreamWriter(new java.io.FileOutputStream(textsizefile));
                write.append(textsize);
write.close();
}

if(split[0] == prefix + "spamdelay") {
        preventDefault();
        stime = split[1];
        stime2 = split[1];

        clientMessage(client + "Spam delay set to:§9 " + split[1]);
    }

if(split[0] == prefix + "spammode") {
        preventDefault();      

        if(split[1] == "custom") {
            normalspam = true;
            bypassspam = false;         
clientMessage(client + "Spammode set to:§9 " + split[1]);
        }
        if(split[1] == "bypass") {
            normalspam = false;
            bypassspam = true;
clientMessage(client + "Spam mode set to:§9 " + split[1]);
        }
    }

if(split[0] == prefix + "glidemode") {
        preventDefault();      

        if(split[1] == "nodown") {
            lbsgglide = false;
            nodownglide = true;             
clientMessage(client + "Glidemode set to:§9 " + split[1]);
        }
if(split[1] == "lbsg") {
            lbsgglide = true;
            nodownglide = false;         
clientMessage(client + "Glidemode set to:§9 " + split[1]);
        }
    }

if(split[0] == prefix + "jesusmode") {
        preventDefault();      

        if(split[1] == "normal") {
            jesus1 = true;
            jesus2 = false;         
clientMessage(client + "Jesusmode set to:§9 " + split[1]);
        }
    }

if(split[0] == prefix + "towermode") {
        preventDefault();      

        if(split[1] == "tap") {
            tower1 = true;
            tower2 = false;         
clientMessage(client + "Towermode set to:§9 " + split[1]);
        }
        if(split[1] == "auto") {
            tower1 = false;
            tower2 = true;
clientMessage(client + "Towermode set to:§9 " + split[1]);
        }
    }

if(split[0] == prefix + "spamtext") {
        preventDefault();      
clientMessage(client + "Spamtext set to:§9 " + text.replace("#spamtext ",""));

                java.io.File(ambienfiles).mkdirs();
                ambientext.createNewFile();
                var write = new java.io.OutputStreamWriter(new java.io.FileOutputStream(ambientext));
                write.append(text.replace("#spamtext",""));
                write.close();
				ambienspam = text.replace("#spamtext","");

}


if(split[0] == prefix + "nametag") {
        preventDefault();      
clientMessage(client + "Nametag set to:§9 " + split[1]);
				nametag = split[1];
}

if(split[0] == prefix + "glidemode") {
        preventDefault();      

if(split[1] == "nodown") {
clientMessage(client + "Glidemode set to:§9 " + split[1]);
       glide1 = true;
				glide2 = false;
       glide3 = false;
}
}

if(split[0] == prefix + "glidemotion") {
        preventDefault();      
clientMessage(client + "Glidemotion set to:§9 " + split[1]);
				glidemotion = split[1];
				}

if(split[0] == prefix + "copyip") {
        preventDefault();      
if(Server.getAddress() != "" && Server.getPort() != "0") {
clientMessage("§9IP:§7 " + Server.getAddress() + "\n§9Port:§7 " + Server.getPort());			
copyText(Server.getAddress() + ":" + Server.getPort());
				}
}

if(split[0] == prefix + "info") {
        preventDefault();      
srvinfo = myServerStatus.set(split[1], split[2]);
clientMessage("                             ")
clientMessage("§7 Connecting to Server:§9 " + split[1] + ":" + split[2]);
clientMessage("                             ")
clientMessage("§7Status:§9 " + srvinfo.status);
clientMessage("§7Version:§9 " + srvinfo.version);
clientMessage("§7Software:§9 " + srvinfo.software);
clientMessage("§7Player:§9 " + srvinfo.list);
clientMessage("§7Plugins:§9 " + srvinfo.plugins);
}

if(split[0] == prefix + "speedmode"){
        preventDefault();
        clientMessage(client + "Speedmode set to:§9 " + split[1]);

        if(split[1] == "motion") {
            speedmotion = true;
            speedjump = false;
            speedhop = false;
        }
if(split[1] == "jump") {
            speedmotion = false;
            speedjump = true;
            speedhop = false;
        }
if(split[1] == "hop") {
            speedmotion = false;
            speedjump = false;
            speedhop = true;
        }
    }

if(split[0] != prefix + "help" && split[0] != prefix + "watermark" && split[0] != prefix + "jesusmode" && split[0] != prefix + "info" && split[0] != prefix + "textsize" && split[0] != prefix + "towermode" && split[0] != prefix + "blockfinder" && split[0] != prefix + "spamdelay" && split[0] != prefix + "spammode" && split[0] != prefix + "nametag" && split[0] != prefix + "banitem" && split[0] != prefix + "sm" && split[0] != prefix + "cm" && split[0] != prefix + "onehit" && split[0] != prefix + "fly" && split[0] != prefix + "copyip" && split[0] != prefix + "velocityknock" && split[0] != prefix + "tpradius" && split[0] != prefix + "additem" && split[0] != prefix + "spamtext" && split[0] != prefix + "speedmode" && split[0] != prefix + "glidemode" && split[0] != prefix + "longjump" && split[0] != prefix + "glidemotion" && split[0].startsWith(prefix)) {
        preventDefault();
        clientMessage(client + "§4Unknow Syntax " + "§a" + '"' + split[0].replace("#", "").split() + '"');
}
}

var btbg = new android.graphics.drawable.GradientDrawable();
btbg.setColor(Color.WHITE);
btbg.setStroke(2, android.graphics.Color.BLACK);
btbg.setAlpha(40);
btbg.setCornerRadius(0);

var btbg2 = new android.graphics.drawable.GradientDrawable();
btbg2.setColor(Color.TRANSPARENT);
btbg2.setAlpha(80);
btbg2.setCornerRadius(15);

var btbg3 = new android.graphics.drawable.GradientDrawable();
btbg3.setColor(Color.BLUE);
btbg3.setAlpha(100);
btbg3.setCornerRadius(15);
btbg3.setStroke(4, android.graphics.Color.BLACK);

var bttheme = new android.graphics.drawable.GradientDrawable();
bttheme.setColor(android.graphics.Color.TRANSPARENT);
bttheme.setCornerRadius(0);

var bttheme2 = new android.graphics.drawable.GradientDrawable();
bttheme.setColor(android.graphics.Color.WHITE);
bttheme.setStroke(4, android.graphics.Color.BLACK);
bttheme.setCornerRadius(0);

var bindtheme = new android.graphics.drawable.GradientDrawable();
bindtheme.setColor(android.graphics.Color.TRANSPARENT);
bindtheme.setCornerRadius(0);

var bindtheme2 = new android.graphics.drawable.GradientDrawable();
bindtheme.setColor(android.graphics.Color.BLUE);
bindtheme.setCornerRadius(0);

var arraytheme = new android.graphics.drawable.GradientDrawable();
arraytheme.setColor(android.graphics.Color.TRANSPARENT);
arraytheme.setCornerRadius(0);
arraytheme.setAlpha(120);

var arraytheme2 = new android.graphics.drawable.GradientDrawable();
arraytheme.setColor(android.graphics.Color.BLUE);
arraytheme.setStroke(2, android.graphics.Color.BLACK);
arraytheme.setCornerRadius(3);

function dip2px(dips){
	return Math.ceil(dips * ctx.getResources().getDisplayMetrics().density);
}

function clientStart() {
 function dip2px(dips){
 var ctxl = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
      return Math.ceil(dips * ctx.getResources().getDisplayMetrics().density);
      }
var ctxl = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
ctxl.runOnUiThread(new java.lang.Runnable({ run: function(){
try{
var layoutwatermark = new android.widget.LinearLayout(ctx);
layoutwatermark.setOrientation(1);

imagew = android.util.Base64.decode(ambienmark,0); 
var wmark = new android.widget.ImageView(ctx);
wmark.setImageBitmap(android.graphics.BitmapFactory.decodeByteArray(imagew,0,imagew.length));
wmark.setOnClickListener(new View.OnClickListener({
onClick: function(viewarg){
			if(ambienclosed == false){
PlayerBtn();
OtherBtn();
MovementBtn();
RenderBtn();
CombatBtn();


playerbtnclosed = true;
otherbtnclosed = true;
renderbtnclosed = true;
combatbtnclosed = true;
movementbtnclosed = true;
ambienclosed = true; 
	}else{
if(ambienclosed == true){
	 
ambienclosed = false;
ClosePlayer();
CloseMovement();
CloseRender();
CloseCombat();
CloseOther();

			}
}
}
}));
wmark.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
   case android.view.MotionEvent.ACTION_DOWN:
 dx = mPosX - b.getRawX();
 dy = mPosY - b.getRawY();
   break;
 case android.view.MotionEvent.ACTION_MOVE:
     mPosX = b.getRawX() + dx;
     mPosY = b.getRawY() + dy;
     GUIwatermark.update(mPosX, mPosY, -1, -1);
   break;
 case android.view.MotionEvent.ACTION_UP:
  case android.view.MotionEvent.ACTION_CANCEL:
  moving = false;
   }
  } catch (c) {}
    return true;
  }
}));
wmark.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
moving = true;
return true;
 }
}));
layoutwatermark.addView(wmark);

      GUIwatermark = new android.widget.PopupWindow(layoutwatermark, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT, android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT);
      GUIwatermark.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
      GUIwatermark.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0,0);
      }catch(err){
      print('An error occured: ' + err);
      }
      }}));
}

function PlayerBtn(){
	ctx.runOnUiThread(new Runnable({ run: function(){
	try{
	var PlayerBtn1 = new android.widget.LinearLayout(ctx);
	PlayerBtn1.setOrientation(1);
	PlayerBtn1.setBackground(bttheme); 
	PlayerBtn1.getBackground().setAlpha(100);
PlayerBtn1.getBackground().setCornerRadius(10);
		var buttonplayer = new Button(ctx);
	buttonplayer.setText("PLAYER");
	buttonplayer.setPadding(0, 0, 0, 0);
buttonplayer.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(playerbarclosed == false) {
				PlayerBar();
    Playerbtnmenu1.dismiss();
    playerbtnclosed = false;
    playerbarclosed = true;

}
				}}));
buttonplayer.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
   case android.view.MotionEvent.ACTION_DOWN:
 dx = mPosX - b.getRawX();
 dy = mPosY - b.getRawY();
   break;
 case android.view.MotionEvent.ACTION_MOVE:
     mPosX = b.getRawX() + dx;
     mPosY = b.getRawY() + dy;
     Playerbtnmenu1.update(mPosX, mPosY, -1, -1);
playerwidth = mPosX;
playerheight = mPosY;
   break;
 case android.view.MotionEvent.ACTION_UP:
  case android.view.MotionEvent.ACTION_CANCEL:
  moving = false;
   }
  } catch (c) {}

    return true;
  }
}));
buttonplayer.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
moving = true;
return true;
 }
}));
	buttonplayer.setBackground(buttonplayer ? btbg3 : btbg3);
							PlayerBtn1.addView(buttonplayer, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

Playerbtnmenu1 = new PopupWindow(PlayerBtn1, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, ctx.getWindowManager().getDefaultDisplay().getHeight()/11);
	
		Playerbtnmenu1.setAnimationStyle(android.R.style.Animation_Toast);
	Playerbtnmenu1.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, playerwidth, playerheight);
			}catch(error){
				Toast.makeText(ctx, "An error occured: " + error, 1).show();
			}
	}}));
}

function MovementBtn(){
	ctx.runOnUiThread(new Runnable({ run: function(){
	try{
	var MovementBtn1 = new android.widget.LinearLayout(ctx);
	MovementBtn1.setOrientation(1);
	MovementBtn1.setBackground(bttheme);
	MovementBtn1.getBackground().setAlpha(100);

		var buttonMovement = new Button(ctx);
	buttonMovement.setText("MOVE");
	buttonMovement.setPadding(0, 0, 0, 0);
buttonMovement.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(movementbarclosed == false) {
				MovementBar();
    Movementbtnmenu1.dismiss();   
    movementbtnclosed = false;
    movementbarclosed = true;

}
				}}));

buttonMovement.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
   case android.view.MotionEvent.ACTION_DOWN:
 dx = mPosX - b.getRawX();
 dy = mPosY - b.getRawY();
   break;
 case android.view.MotionEvent.ACTION_MOVE:
     mPosX = b.getRawX() + dx;
     mPosY = b.getRawY() + dy;
     Movementbtnmenu1.update(mPosX, mPosY, -1, -1);
movementwidth = mPosX;
movementheight = mPosY;
   break;
 case android.view.MotionEvent.ACTION_UP:
  case android.view.MotionEvent.ACTION_CANCEL:
  moving = false;
   }
  } catch (c) {}
    return true;
  }
}));
buttonMovement.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
moving = true;
return true;
 }
}));
	buttonMovement.setBackground(buttonMovement ? btbg3 : btbg3);
				MovementBtn1.addView(buttonMovement, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

Movementbtnmenu1 = new PopupWindow(MovementBtn1, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, ctx.getWindowManager().getDefaultDisplay().getHeight()/11);
	
		Movementbtnmenu1.setAnimationStyle(android.R.style.Animation_Toast);
	Movementbtnmenu1.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.CENTER, movementwidth, movementheight);
			}catch(error){
				Toast.makeText(ctx, "An error occured: " + error, 1).show();
			}
	}}));
}

function CombatBtn(){
	ctx.runOnUiThread(new Runnable({ run: function(){
	try{
	var CombatBtn1 = new android.widget.LinearLayout(ctx);
	CombatBtn1.setOrientation(1);
	CombatBtn1.setBackground(bttheme);
	CombatBtn1.getBackground().setAlpha(100);

		var buttonCombat = new Button(ctx);
	buttonCombat.setText("COMBAT");
	buttonCombat.setPadding(0, 0, 0, 0);
buttonCombat.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(combatbarclosed == false) {
				CombatBar();
    Combatbtnmenu1.dismiss();
    combatbtnclosed = false;
    combatbarclosed = true;

}
				}}));
buttonCombat.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
   case android.view.MotionEvent.ACTION_DOWN:
 dx = mPosX - b.getRawX();
 dy = mPosY - b.getRawY();
   break;
 case android.view.MotionEvent.ACTION_MOVE:
     mPosX = b.getRawX() + dx;
     mPosY = b.getRawY() + dy;
     Combatbtnmenu1.update(mPosX, mPosY, -1, -1);
combatwidth = mPosX;
combatheight = mPosY;
   break;
 case android.view.MotionEvent.ACTION_UP:
  case android.view.MotionEvent.ACTION_CANCEL:
  moving = false;
   }
  } catch (c) {}
    return true;
  }
}));
buttonCombat.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
moving = true;
return true;
 }
}));
	buttonCombat.setBackground(buttonCombat ? btbg3 : btbg3);
				CombatBtn1.addView(buttonCombat, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

Combatbtnmenu1 = new PopupWindow(CombatBtn1, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, ctx.getWindowManager().getDefaultDisplay().getHeight()/11);
	
Combatbtnmenu1.setAnimationStyle(android.R.style.Animation_Toast);
			Combatbtnmenu1.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.TOP, combatwidth, combatheight);
			}catch(error){
				Toast.makeText(ctx, "An error occured: " + error, 1).show();
			}
	}}));
}

function RenderBtn(){
	ctx.runOnUiThread(new Runnable({ run: function(){
	try{
	var RenderBtn1 = new android.widget.LinearLayout(ctx);
	RenderBtn1.setOrientation(1);
	RenderBtn1.setBackground(bttheme);
	RenderBtn1.getBackground().setAlpha(100);

		var buttonRender = new Button(ctx);
	buttonRender.setText("RENDER");
	buttonRender.setPadding(0, 0, 0, 0);
buttonRender.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(renderbarclosed == false) {
				RenderBar();
    Renderbtnmenu1.dismiss();
    renderbtnclosed = false;
    renderbarclosed = true;

}
				}}));
buttonRender.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
   case android.view.MotionEvent.ACTION_DOWN:
 dx = mPosX - b.getRawX();
 dy = mPosY - b.getRawY();
   break;
 case android.view.MotionEvent.ACTION_MOVE:
     mPosX = b.getRawX() + dx;
     mPosY = b.getRawY() + dy;
     Renderbtnmenu1.update(mPosX, mPosY, -1, -1);
renderwidth = mPosX;
renderheight = mPosY;
   break;
 case android.view.MotionEvent.ACTION_UP:
  case android.view.MotionEvent.ACTION_CANCEL:
  moving = false;
   }
  } catch (c) {}
    return true;
  }
}));
buttonRender.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
moving = true;
return true;
 }
}));
	buttonRender.setBackground(buttonRender ? btbg3 : btbg3);
				RenderBtn1.addView(buttonRender, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

Renderbtnmenu1 = new PopupWindow(RenderBtn1, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, ctx.getWindowManager().getDefaultDisplay().getHeight()/11);
	
	Renderbtnmenu1.setAnimationStyle(android.R.style.Animation_Toast);
	Renderbtnmenu1.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, renderwidth, renderheight);
			}catch(error){
				Toast.makeText(ctx, "An error occured: " + error, 1).show();
			}
	}}));
}

function OtherBtn(){
	ctx.runOnUiThread(new Runnable({ run: function(){
	try{
	var OtherBtn1 = new android.widget.LinearLayout(ctx);
	OtherBtn1.setOrientation(1);
	OtherBtn1.setBackground(bttheme);
	OtherBtn1.getBackground().setAlpha(100);

		var buttonOther = new Button(ctx);
	buttonOther.setText("OTHER");
	buttonOther.setPadding(0, 0, 0, 0);
buttonOther.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(otherbarclosed == false) {
				OtherBar();
    Otherbtnmenu1.dismiss();
    otherbtnclosed = false;
    otherbarclosed = true;

}
				}}));
buttonOther.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(a, b) {
try {
if (!moving) return false;
switch (b.getAction()) {
   case android.view.MotionEvent.ACTION_DOWN:
 dx = mPosX - b.getRawX();
 dy = mPosY - b.getRawY();
   break;
 case android.view.MotionEvent.ACTION_MOVE:
     mPosX = b.getRawX() + dx;
     mPosY = b.getRawY() + dy;
     Otherbtnmenu1.update(mPosX, mPosY, -1, -1);
otherwidth = mPosX;
otherheight = mPosY;
   break;
 case android.view.MotionEvent.ACTION_UP:
  case android.view.MotionEvent.ACTION_CANCEL:
  moving = false;
   }
  } catch (c) {}
    return true;
  }
}));
buttonOther.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
moving = true;
return true;
 }
}));
	buttonOther.setBackground(buttonOther ? btbg3 : btbg3);
				OtherBtn1.addView(buttonOther, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

Otherbtnmenu1 = new PopupWindow(OtherBtn1, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, ctx.getWindowManager().getDefaultDisplay().getHeight()/11);

Otherbtnmenu1.setAnimationStyle(android.R.style.Animation_Toast);
	Otherbtnmenu1.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.TOP,  otherwidth, otherheight);
			}catch(error){
				Toast.makeText(ctx, "An error occured: " + error, 1).show();
			}
	}}));
}

function PlayerBar(){
	ctx.runOnUiThread(new Runnable({ run: function(){
	try{
	var pModBar1 = new android.widget.LinearLayout(ctx);
	pModBar1.setOrientation(1);
	pmenuScroll2 = new ScrollView(ctx);
	
	var pModBar2 = new android.widget.LinearLayout(ctx);
	pModBar2.setOrientation(1);
	
	pmenuScroll2.addView(pModBar1);
	pModBar2.addView(pmenuScroll2);
	pModBar2.setBackground(bttheme);
	pModBar2.getBackground().setAlpha(100);

var mod = new Button(ctx);
	mod.setText("PLAYER");
	mod.setPadding(0, 0, 0, 0);
	mod.setBackground(nothing ? btbg3 : btbg3);
	mod.getBackground().setAlpha(100);
mod.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){

				PlayerBtn();
pmenuScroll2 = null;
pmenu2.dismiss();
playerbarclosed = false;
playerbtnclosed = true;
				}}));

	pModBar1.addView(mod, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);	

var der = new Button(ctx);
	der.setText("Derp");
	der.setBackground(derp ? btbg : btbg2);
	der.getBackground().setAlpha(100);
  der.setTextSize(textsize);
der.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(derp == false) {
layoutarray.addView(arrayname10);
derp = true;
der.setBackground(btbg);
}else{
if(derp == true) {
layoutarray.removeView(arrayname10);
derp = false;
der.setBackground(btbg2);
}
}
				}}));
der.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("Ever wanted to spin like a retard ?");
return true;
 }
}));
	pModBar1.addView(der, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

var rea = new Button(ctx);
	rea.setText("InfReach");
	rea.setBackground(infinityreach ? btbg : btbg2);
	rea.getBackground().setAlpha(100);
  rea.setTextSize(textsize);
rea.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(infinityreach == false) {
layoutarray.addView(arrayname19);
infinityreach = true;
rea.setBackground(btbg);
SearchBtn();
}else{
if(infinityreach == true) {
layoutarray.removeView(arrayname19);
infinityreach = false;
rea.setBackground(btbg2);
Searchbtnmenu1.dismiss();
}
}
				}}));
rea.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("Hit the Entity from 100 blocks distance");
return true;
 }
}));
	pModBar1.addView(rea, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

var scaf = new Button(ctx);
	scaf.setText("Scaffold");
	scaf.setBackground(scaffold ? btbg : btbg2);
	scaf.getBackground().setAlpha(100);
  scaf.setTextSize(textsize);
scaf.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(scaffold == false) {
layoutarray.addView(arrayname12);
scaffold = true;
scaf.setBackground(btbg);
}else{
if(scaffold == true) {
layoutarray.removeView(arrayname12);
scaffold = false;
scaf.setBackground(btbg2);
}
}
				}}));
scaf.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("Faster than fastbridge");
return true;
 }
}));
	pModBar1.addView(scaf, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

	pmenu2 = new PopupWindow(pModBar2, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.6);

var telep = new Button(ctx);
	telep.setText("Teleport");
	telep.setBackground(teleportpad ? btbg : btbg2);
	telep.getBackground().setAlpha(100);
  telep.setTextSize(textsize);
telep.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(tbtnclosed == false) {
layoutarray.addView(arrayname18);
TeleportationBtn();
teleportpad = true;
tbtnclosed = true;
telep.setBackground(btbg);
}else{
if(tbtnclosed == true) {
layoutarray.removeView(arrayname18);
Teleportationbtnmenu1.dismiss();
teleportpad = false;
tbtnclosed = false;
telep.setBackground(btbg2);
}
}
				}}));
telep.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("Teleport you to other places");
return true;
 }
}));
	pModBar1.addView(telep, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

var towe = new Button(ctx);
	towe.setText("Tower");
	towe.setBackground(tower ? btbg : btbg2);
	towe.getBackground().setAlpha(100);
  towe.setTextSize(textsize);
towe.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(tower == false) {
layoutarray.addView(arrayname11);
tower = true;
towe.setBackground(btbg);
}else{
if(tower == true) {
layoutarray.removeView(arrayname11);
tower = false;
towe.setBackground(btbg2);
}
}
				}}));
towe.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("Stacking blocks under your feet");
return true;
 }
}));
	pModBar1.addView(towe, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

pmenu2.setAnimationStyle(android.R.style.Animation_InputMethod);
	pmenu2.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, playerwidth, playerheight);
			}catch(error){
				Toast.makeText(ctx, "An error occured: " + error, 1).show();
			}
	}}));
}

function ClosePlayer() {
if(playerbarclosed == true && playerbtnclosed == false) {
pmenuScroll2 = null;
pmenu2.dismiss();
playerbarclosed = false;
}else{

if(playerbarclosed == false && playerbtnclosed == true) {
 Playerbtnmenu1.dismiss();
	playerbtnclosed = false;
}
}
}

function MovementBar(){
	ctx.runOnUiThread(new Runnable({ run: function(){
	try{
	var mmodBar1 = new android.widget.LinearLayout(ctx);
	mmodBar1.setOrientation(1);
	mmenuScroll2 = new ScrollView(ctx);
	
	var mmodBar2 = new android.widget.LinearLayout(ctx);
	mmodBar2.setOrientation(1);
	
	mmenuScroll2.addView(mmodBar1);
	mmodBar2.addView(mmenuScroll2);
	mmodBar2.setBackground(bttheme);
	mmodBar2.getBackground().setAlpha(100);

var hack3 = new Button(ctx);
	hack3.setText("MOVE");
	hack3.setPadding(0, 0, 0, 0);
	hack3.setBackground(nothing ? btbg3 : btbg3);
	hack3.getBackground().setAlpha(100);
hack3.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){

				MovementBtn();
mmenuScroll2 = null;
mmenu2.dismiss();
movementbarclosed = false;
movementbtnclosed = true;

				}}));
	mmodBar1.addView(hack3, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);	

var ladde = new Button(ctx);
	ladde.setText("Fastladder");
	ladde.setBackground(fastladder ? btbg : btbg2);
	ladde.getBackground().setAlpha(100);
  ladde.setTextSize(textsize);
ladde.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(fastladder == false) {
layoutarray.addView(arrayname3);
fastladder = true;
ladde.setBackground(btbg);
}else{
if(fastladder == true) {
layoutarray.removeView(arrayname3);
fastladder = false;
ladde.setBackground(btbg2);
}
}
				}}));
ladde.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("Climb up ladders faster");
return true;
 }
}));
	mmodBar1.addView(ladde, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

var glid = new Button(ctx);
	glid.setText("Glide");
	glid.setBackground(glide ? btbg : btbg2);
	glid.getBackground().setAlpha(100);
  glid.setTextSize(textsize);
glid.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(glide == false) {
curPosY = Player.getY()-2;
layoutarray.addView(arrayname6);
glide = true;
glid.setBackground(btbg);
}else{
if(glide == true) {
layoutarray.removeView(arrayname6);
glide = false;
glid.setBackground(btbg2);
}
}
				}}));
glid.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("Glide like the birds do");
return true;
 }
}));
	mmodBar1.addView(glid, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

var jesu = new Button(ctx);
	jesu.setText("Jesus");
	jesu.setBackground(jesus ? btbg : btbg2);
	jesu.getBackground().setAlpha(100);
  jesu.setTextSize(textsize);
jesu.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(jesus == false) {
layoutarray.addView(arrayname4);
jesus = true;
jesu.setBackground(btbg);
}else{
if(jesus == true) {
layoutarray.removeView(arrayname4);
jesus = false;
jesu.setBackground(btbg2);
}
}
				}}));
jesu.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("Walk over water like jesus did");
return true;
 }
}));
	mmodBar1.addView(jesu, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

var long = new Button(ctx);
	long.setText("Longjump");
	long.setBackground(longjump ? btbg : btbg2);
	long.getBackground().setAlpha(100);
  long.setTextSize(textsize);
long.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(longjump == false) {
layoutarray.addView(arrayname1);
longjump = true;
long.setBackground(btbg);
}else{
if(longjump == true) {
layoutarray.removeView(arrayname1);
longjump = false;
long.setBackground(btbg2);
}
}
				}}));
long.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("You wont be able to believe how far you can jump");
return true;
 }
}));
	mmodBar1.addView(long, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

var nofal = new Button(ctx);
	nofal.setText("Nofall");
	nofal.setBackground(nofall ? btbg : btbg2);
	nofal.getBackground().setAlpha(100);
  nofal.setTextSize(textsize);
nofal.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(nofall == false) {
layoutarray.addView(arrayname5);
nofall = true;
nofal.setBackground(btbg);
}else{
if(nofall == true) {
layoutarray.removeView(arrayname5);
nofall = false;
nofal.setBackground(btbg2);
}
}
				}}));
nofal.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("Dont get fall-damage after falling");
return true;
 }
}));
	mmodBar1.addView(nofal, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

var spee = new Button(ctx);
	spee.setText("Speed");
	spee.setBackground(speed ? btbg : btbg2);
	spee.getBackground().setAlpha(100);
  spee.setTextSize(textsize);
spee.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(speed == false) {
layoutarray.addView(arrayname17);
speed = true;
spee.setBackground(btbg);
}else{
if(speed == true) {
layoutarray.removeView(arrayname17);
speed = false;
spee.setBackground(btbg2);
}
}
				}}));
spee.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("Walk faster than flash");
return true;
 }
}));
	mmodBar1.addView(spee, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

var ste = new Button(ctx);
	ste.setText("Step");
	ste.setBackground(step ? btbg : btbg2);
	ste.getBackground().setAlpha(100);
  ste.setTextSize(textsize);
ste.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(step == false) {
layoutarray.addView(arrayname2);
step = true;
ste.setBackground(btbg);
}else{
if(step == true) {
layoutarray.removeView(arrayname2);
step = false;
ste.setBackground(btbg2);
}
}
				}}));
ste.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("Auto stepping blocks");
return true;
 }
}));
	mmodBar1.addView(ste, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

	mmenu2 = new PopupWindow(mmodBar2, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.6);
		
mmenu2.setAnimationStyle(android.R.style.Animation_InputMethod);

	mmenu2.showAtLocation(ctx.getWindow().getDecorView(), Gravity.TOP | Gravity.CENTER, movementwidth, movementheight);
			}catch(error){
				Toast.makeText(ctx, "An error occured: " + error, 1).show();
			}
	}}));
}

function CloseMovement() {
if(movementbarclosed == true && movementbtnclosed == false) {
mmenuScroll2 = null;
mmenu2.dismiss();
movementbarclosed = false;
}else{

if(movementbarclosed == false && movementbtnclosed == true) {
 Movementbtnmenu1.dismiss();
	movementbtnclosed = false;
}
}
}

function CombatBar(){
	ctx.runOnUiThread(new Runnable({ run: function(){
	try{
	var cmodBar1 = new android.widget.LinearLayout(ctx);
	cmodBar1.setOrientation(1);
	cmenuScroll2 = new ScrollView(ctx);
	
	var cmodBar2 = new android.widget.LinearLayout(ctx);
	cmodBar2.setOrientation(1);
	
	cmenuScroll2.addView(cmodBar1);
	cmodBar2.addView(cmenuScroll2);
	cmodBar2.setBackground(bttheme);
	cmodBar2.getBackground().setAlpha(100);

var mod = new Button(ctx);
	mod.setText("COMBAT");
	mod.setPadding(0, 0, 0, 0);
	mod.setBackground(nothing ? btbg3 : btbg3);
	mod.getBackground().setAlpha(100);
mod.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){

				CombatBtn();
cmenuScroll2 = null;
cmenu2.dismiss();
combatbarclosed = false;
combatbtnclosed = true;

				}}));
	cmodBar1.addView(mod, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);	

var aura = new Button(ctx);
	aura.setText("Aura");
	aura.setBackground(aimaura ? btbg : btbg2);
	aura.getBackground().setAlpha(100);
 aura.setTextSize(textsize);
aura.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(aimaura == false) {
layoutarray.addView(arrayname13);
aimaura = true;
aura.setBackground(btbg);
}else{
if(aimaura == true) {
layoutarray.removeView(arrayname13);
aimaura = false;
aura.setBackground(btbg2);
}
}
				}}));
aura.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("Aims at your nearest target");
return true;
 }
}));
	cmodBar1.addView(aura, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

	var morebox = new Button(ctx);
	morebox.setText("Hitbox");
	morebox.setBackground(hitbox ? btbg : btbg2);
	morebox.getBackground().setAlpha(100);
  morebox.setTextSize(textsize);
morebox.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(hitbox == false) {
layoutarray.addView(arrayname14);
hitbox = true;
morebox.setBackground(btbg);
}else{
if(hitbox == true) {
layoutarray.removeView(arrayname14);
hitbox = false;
morebox.setBackground(btbg2);
var players = Server.getAllPlayers();
for(i = 0; i < players.length; i++) {
Entity.setCollisionSize(players[i], 1.2, 1.8);
}
}
}
				}}));
morebox.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("Expands the enemy`s hitbox");
return true;
 }
}));
	cmodBar1.addView(morebox, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

var team = new Button(ctx);
	team.setText("Teams");
	team.setBackground(teams ? btbg : btbg2);
	team.getBackground().setAlpha(100);
  team.setTextSize(textsize);
team.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(teams == false) {
layoutarray.addView(arrayname15);
teams = true;
team.setBackground(btbg);
}else{
if(teams == true) {
layoutarray.removeView(arrayname15);
teams = false;
team.setBackground(btbg2);
}
}
				}}));
team.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("Stop targetting your teammates/friends");
return true;
 }
}));
	cmodBar1.addView(team, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);	

var veloc = new Button(ctx);
	veloc.setText("Velocity");
	veloc.setBackground(velocity ? btbg : btbg2);
	veloc.getBackground().setAlpha(100);
  veloc.setTextSize(textsize);
veloc.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(velocity == false) {
layoutarray.addView(arrayname20);
velocity = true;
veloc.setBackground(btbg);
}else{
if(velocity == true) {
layoutarray.removeView(arrayname20);
velocity = false;
veloc.setBackground(btbg2);
}
}
				}}));
veloc.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("Dont getting knockback");
return true;
 }
}));
	cmodBar1.addView(veloc, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

	cmenu2 = new PopupWindow(cmodBar2, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.6);
		
cmenu2.setAnimationStyle(android.R.style.Animation_InputMethod);

	cmenu2.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.TOP, combatwidth, combatheight);
			}catch(error){
				Toast.makeText(ctx, "An error occured: " + error, 1).show();
			}
	}}));
}

function CloseCombat() {
if(combatbarclosed == true && combatbtnclosed == false) {
cmenuScroll2 = null;
cmenu2.dismiss();
combatbarclosed = false;
}else{

if(combatbarclosed == false && combatbtnclosed == true) {
 Combatbtnmenu1.dismiss();
	combatbtnclosed = false;
}
}
}

function RenderBar(){
	ctx.runOnUiThread(new Runnable({ run: function(){
	try{
	var rmodBar1 = new android.widget.LinearLayout(ctx);
	rmodBar1.setOrientation(1);
	rmenuScroll2 = new ScrollView(ctx);
	
	var rmodBar2 = new android.widget.LinearLayout(ctx);
	rmodBar2.setOrientation(1);
	
	rmenuScroll2.addView(rmodBar1);
	rmodBar2.addView(rmenuScroll2);
	rmodBar2.setBackground(bttheme);
	rmodBar2.getBackground().setAlpha(100);

var mod = new Button(ctx);
	mod.setText("RENDER");
	mod.setPadding(0, 0, 0, 0);
	mod.setBackground(nothing ? btbg3 : btbg3);
	mod.getBackground().setAlpha(100);
mod.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){

				RenderBtn();
rmenuScroll2 = null;
rmenu2.dismiss();
renderbarclosed = false;
renderbtnclosed = true;

				}}));
	rmodBar1.addView(mod, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);	

var bri = new Button(ctx);
	bri.setText("Brightness");
	bri.setBackground(brightness ? btbg : btbg2);
	bri.getBackground().setAlpha(100);
 bri.setTextSize(textsize);
bri.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(brightness == false) {
layoutarray.addView(arrayname22);
brightness = true;
bri.setBackground(btbg);
}else{
if(brightness == true) {
layoutarray.removeView(arrayname22);
brightness = false;
Entity.removeEffect(Player.getEntity(), MobEffect.nightVision);
bri.setBackground(btbg2);
}
}
				}}));
bri.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("Bright up dark places");
return true;
 }
}));
	rmodBar1.addView(bri, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

var esp = new Button(ctx);
	esp.setText("ESP");
	esp.setBackground(playeresp ? btbg : btbg2);
	esp.getBackground().setAlpha(100);
 esp.setTextSize(textsize);
esp.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(playeresp == false) {
layoutarray.addView(arrayname16);
playeresp = true;
esp.setBackground(btbg);
}else{
if(playeresp == true) {
layoutarray.removeView(arrayname16);
playeresp = false;
esp.setBackground(btbg2);
}
}
				}}));
esp.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("See targets wherever they are");
return true;
 }
}));
	rmodBar1.addView(esp, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

	rmenu2 = new PopupWindow(rmodBar2, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.6);
		
rmenu2.setAnimationStyle(android.R.style.Animation_InputMethod);

	rmenu2.showAtLocation(ctx.getWindow().getDecorView(), Gravity.LEFT | Gravity.TOP, renderwidth, renderheight);
			}catch(error){
				Toast.makeText(ctx, "An error occured: " + error, 1).show();
			}
	}}));
}

function CloseRender() {
if(renderbarclosed == true && renderbtnclosed == false) {
rmenuScroll2 = null;
rmenu2.dismiss();
renderbarclosed = false;
}else{

if(renderbarclosed == false && renderbtnclosed == true) {
 Renderbtnmenu1.dismiss();
	renderbtnclosed = false;
}
}
}

function OtherBar(){
	ctx.runOnUiThread(new Runnable({ run: function(){
	try{
	var omodBar1 = new android.widget.LinearLayout(ctx);
	omodBar1.setOrientation(1);
	omenuScroll2 = new ScrollView(ctx);
	
	var omodBar2 = new android.widget.LinearLayout(ctx);
	omodBar2.setOrientation(1);
	
	omenuScroll2.addView(omodBar1);
	omodBar2.addView(omenuScroll2);
	omodBar2.setBackground(bttheme);
	omodBar2.getBackground().setAlpha(100);

var mod = new Button(ctx);
	mod.setText("OTHER");
	mod.setPadding(0, 0, 0, 0);
	mod.setBackground(nothing ? btbg3 : btbg3);
	mod.getBackground().setAlpha(100);
mod.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){

				OtherBtn();
omenuScroll2 = null;
omenu2.dismiss();
otherbarclosed = false;
otherbtnclosed = true;

				}}));
	omodBar1.addView(mod, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);	

var ant = new Button(ctx);
	ant.setText("AntiEffects");
	ant.setBackground(antieffects ? btbg : btbg2);
	ant.getBackground().setAlpha(100);
  ant.setTextSize(textsize);
ant.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(antieffects == false) {
layoutarray.addView(arrayname21);
antieffects = true;
ant.setBackground(btbg);
}else{
if(antieffects == true) {
layoutarray.removeView(arrayname21);
antieffects = false;
ant.setBackground(btbg2);
}
}
				}}));
ant.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("Removes bad effects from you");
return true;
 }
}));
	omodBar1.addView(ant, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

	var nam = new Button(ctx);
	nam.setText("Namehide");
	nam.setBackground(namehide ? btbg : btbg2);
	nam.getBackground().setAlpha(100);
  nam.setTextSize(textsize);
nam.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(namehide == false) {
layoutarray.addView(arrayname8);
namehide = true;
nam.setBackground(btbg);
}else{
if(namehide == true) {
layoutarray.removeView(arrayname8);
namehide = false;
nam.setBackground(btbg2);
}
}
				}}));
nam.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("If you are recording nobody can see your name");
return true;
 }
}));
	omodBar1.addView(nam, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

		var saf = new Button(ctx);
	saf.setText("Safewalk");
	saf.setBackground(safewalk ? btbg : btbg2);
	saf.getBackground().setAlpha(100);
  saf.setTextSize(textsize);
saf.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(safewalk == false) {
layoutarray.addView(arrayname9);
safewalk = true;
saf.setBackground(btbg);
}else{
if(safewalk == true) {
layoutarray.removeView(arrayname9);
safewalk = false;
saf.setBackground(btbg2);
}
}
				}}));
saf.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("Sneaking at the edge of blocks");
return true;
 }
}));
	omodBar1.addView(saf, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

var blf = new Button(ctx);
	blf.setText("Blockfinder");
	blf.setBackground(blockfinder ? btbg : btbg2);
	blf.getBackground().setAlpha(100);
  blf.setTextSize(textsize);
blf.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(blockfinder == false) {
clientMessage(client + "Modify the blockid you'r searching at with §9#blockfinder [ID]");
layoutarray.addView(arrayname23);
blockfinder = true;
blf.setBackground(btbg);
}else{
if(blockfinder == true) {
layoutarray.removeView(arrayname23);
blockfinder = false;
blf.setBackground(btbg2);
}
}
				}}));
blf.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("Tap on the ground and see whats under it");
return true;
 }
}));
	omodBar1.addView(blf, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);
	
var spa = new Button(ctx);
	spa.setText("Spam");
	spa.setBackground(spammer ? btbg : btbg2);
	spa.getBackground().setAlpha(100);
  spa.setTextSize(textsize);
spa.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
if(spammer == false) {
layoutarray.addView(arrayname7);
spammer = true;
spa.setBackground(btbg);
}else{
if(spammer == true) {
layoutarray.removeView(arrayname7);
spammer = false;
spa.setBackground(btbg2);
}
}
				}}));
spa.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
info("Spamming in the chat");
return true;
 }
}));
	omodBar1.addView(spa, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

	omenu2 = new PopupWindow(omodBar2, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.6);

omenu2.setAnimationStyle(android.R.style.Animation_InputMethod);

	omenu2.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.TOP, otherwidth, otherheight);
			}catch(error){
				Toast.makeText(ctx, "An error occured: " + error, 1).show();
			}
	}}));
}

function CloseOther() {
if(otherbarclosed == true && otherbtnclosed == false) {
omenuScroll2 = null;
omenu2.dismiss();
otherbarclosed = false;
}else{

if(otherbarclosed == false && otherbtnclosed == true) {
 Otherbtnmenu1.dismiss();
	otherbtnclosed = false;
}
}
}

function refreshClient() {
ctx.runOnUiThread(new java.lang.Runnable({
            run: function () {
ambienclosed = false;
ClosePlayer();
CloseMovement();
CloseRender();
CloseCombat();
CloseOther();
GUIwatermark.dismiss();
clientStart();
}}));
}

function modTick() {

yaw = Entity.getYaw(getPlayerEnt());
curspeed = Math.sqrt(Math.pow(Entity.getVelX(getPlayerEnt()), 2) + Math.pow(Entity.getVelZ(getPlayerEnt()), 2));

if(aimaura == true) {
var ent = getNearestEntity(6);
if(Entity.getRenderType(ent)!=27 && Entity.getEntityId != "15"){
if(Entity.getNameTag(ent) != " "){
if(ent != null)aimAtEnt(ent);
}
}
if(Entity.getRenderType(ent) != 27 && ent != null && Entity.getHealth >= 20.000001)aimAtEnt(ent);
}                              

if(brightness) {
Level.setTime(0);
Entity.addEffect(getPlayerEnt(), MobEffect.nightVision, 999999, 99, true, true);
}

if(longjump) {
if(Entity.getVelY(getPlayerEnt()) > 0.32){
setVelX(getPlayerEnt(), -jumpboost * Math.sin(yaw / 180 * Math.PI));
if(Entity.getVelY(getPlayerEnt()) > 0.32){
setVelZ(getPlayerEnt(), jumpboost * Math.cos(yaw / 180 * Math.PI));
}
}
}
    
if(glide) {
if(nodownglide == true) {
setVelY(getPlayerEnt(), glidemotion);
}
if(lbsgglide == true) {
if(!Utils.Player.onGround() && Player.getY() >= curPosY) {

setVelY(getPlayerEnt(), -0.05);

                setVelX(getPlayerEnt(), -0.4 * Math.sin(yaw / 180 * Math.PI));
                setVelZ(getPlayerEnt(), 0.4 * Math.cos(yaw / 180 * Math.PI));
}
if(Player.getY() <= curPosY) {
setVelY(getPlayerEnt(), 2.2);
}
}
}

if(jesus)  {
            if(Level.getTile(getPlayerX(), getPlayerY()-2.1, getPlayerZ())==8 ||
                Level.getTile(getPlayerX(), getPlayerY()-2.1, getPlayerZ())==9 ||
                Level.getTile(getPlayerX(), getPlayerY()-2.1, getPlayerZ())==10 ||
                Level.getTile(getPlayerX(), getPlayerY()-2.1, getPlayerZ())==11)
            {
                setVelY(getPlayerEnt(), 0);
            }
        }

if(scaffoldtick) {
            setVelX(getPlayerEnt(), -0.49  * Math.sin(yaw / 180 * Math.PI));
            setVelZ(getPlayerEnt(), 0.49 * Math.cos(yaw / 180 * Math.PI));
scaffoldtick = false;
}

if(derp) {
        var player = getPlayerEnt();
        var y = Math.floor(Entity.getYaw(player));
        var p = Math.floor(Entity.getPitch(player));
        Entity.setRot(player, y+90, p);
    }

if(step) {
if(!Utils.Player.isInWater() && !Utils.Player.isFall()) {
            if(Utils.Player.isCollidedHorizontally()) {
      setPositionRelative(getPlayerEnt(), 0, 1, 0);
Entity.setSneaking(getPlayerEnt(), true);
            }
        }
}

if(spammer) {
var random = ((Math.floor(Math.random() * (718355 + 87364 - 763904)) + 34723));
var random2 = ((Math.floor(Math.random() * (577373 + 92834 - 10573)) + 8734));

        if(bypassspam == true) {
                          if(stime != 0) {
                    stime--;
                }
                if(stime == 0) {
                    stime = stime2;
                    Server.sendChat("[" + random + "]" + " Ambien Client by TimmYCode " + "[" + random2 + "]");
                }
            }       
        if(normalspam == true) {
            if(stime != 0) {
                stime--;
            }
            if(stime == 0) {
                stime = stime2;
                Server.sendChat(ambienspam);
            }
        }
}

if(speed) {
if(speedmotion == true) {
        if(curspeed > 0.15) {
            if(Utils.Player.onGround()) {               
                setVelX(getPlayerEnt(), -0.7 * Math.sin(yaw / 180 * Math.PI));
                setVelZ(getPlayerEnt(), 0.7 * Math.cos(yaw / 180 * Math.PI));
            }
}
}

if(speedjump == true) {
if(curspeed > 0.15) {
            if(Utils.Player.onGround()) {
                setVelY(getPlayerEnt(), 0.4);
                setVelX(getPlayerEnt(), -0.5 * Math.sin(yaw / 180 * Math.PI));
setVelZ(getPlayerEnt(), 0.5 * Math.cos(yaw / 180 * Math.PI));
            }else{
setVelY(getPlayerEnt(), -0.09);
}
}
}
if(speedhop == true) {
if(curspeed > 0.15) {
if(Utils.Player.onGround()) {
setVelY(getPlayerEnt(), 0.55);
               setVelX(getPlayerEnt(), -0.70 * 
Math.sin(yaw / 180 * Math.PI));
                setVelZ(getPlayerEnt(), 0.70 * Math.cos(yaw / 180 * Math.PI));
}
if(!Utils.Player.onGround()) {

}
}
}
}

if(hitbox) {
if(teams == false) {
hitboxtimer++;
if(hitboxtimer == 300) {
var players = Server.getAllPlayers();
for(i = 0; i < players.length; i++) {
var entnametag = Entity.getNameTag(players[i]);
if(Player.getName(players[i]) != Player.getName(Player.getEntity())) {
if(players[i] != null && players[i] != "") {

Entity.setCollisionSize(players[i], 5, 5);

}
}
}
hitboxtimer = 0;
}
}

if(teams == true) {
hitboxtimer++;
if(hitboxtimer == 300) {
var players = Server.getAllPlayers();
for(i = 0; i < players.length; i++) {
var entnametag = Entity.getNameTag(players[i]);
if(Player.getName(players[i]) != Player.getName(Player.getEntity())) {
if(players[i] != null && players[i] != "") {

if(teams == true) {
pcolor = Entity.getNameTag(Player.getEntity()).charAt(1).toString();
ecolor = entnametag.charAt(1).toString();
if(pcolor != ecolor && entnametag != "§eBuy §lhere§r§e!") {

Entity.setCollisionSize(players[i], 5, 5);
}
}
}
}
}
hitboxtimer = 0;
}
}
}

if(infinityreach) {
var players = Server.getAllPlayers();
if(Entity.isSneaking(Player.getEntity())) {
Entity.setSneaking(Player.getEntity(), false);
for(i = 0; i < players.length; i++) {
if(Player.getName(players[i]).match(infinityplayer)) {
if(Player.getName(players[i]) != null || Player.getName(players[i]) != "") {
Entity.setPosition(Player.getEntity(), Entity.getX(players[i]), Entity.getY(players[i]), Entity.getZ(players[i]));
var ent = getNearestEntity(1);
aimAtEnt(ent);
}
}
}
}
}

if(nofall){
        if(Utils.Player.isFall()) {
falltimer--;
if(falltimer == 0) {
            setVelY(getPlayerEnt(), -200);
 falltimer = 10;
}
}
if(!Utils.Player.isFall()) {
 falltimer = 10;
}
            }

if(velocity) {
//credits to VeroXCode!
this.tick = 0;

        if (this.health > Entity.getHealth(getPlayerEnt()))
        {
            this.tick = 50;
            setVelX(getPlayerEnt(), Entity.getVelX(getPlayerEnt()) / 100 * percent);
            setVelY(getPlayerEnt(), Entity.getVelY(getPlayerEnt()) / 100 * percent);
            setVelZ(getPlayerEnt(), Entity.getVelZ(getPlayerEnt()) / 100 * percent);
        }
        if (this.tick == 0)
        {

            Entity.setImmobile(getPlayerEnt(), false);

        }

        this.health = Entity.getHealth(getPlayerEnt());

        if (this.tick != 0)
        {

            tick--;

        }

//credits to VeroXCode!
}

if(teleport) {
if(!Utils.Player.isInWater() && !Utils.Player.isCollidedHorizontally()) {

setPositionRelative(getPlayerEnt(), -blocks * Math.sin(yaw / 180 * Math.PI), 1, blocks * Math.cos(yaw / 180 * Math.PI));

teleport = false;
}
}

if(antieffects) {
Entity.removeEffect(Player.getEntity(), MobEffect.blindness);
Entity.removeEffect(Player.getEntity(), MobEffect.digSlowdown);
Entity.removeEffect(Player.getEntity(), MobEffect.harm);
Entity.removeEffect(Player.getEntity(), MobEffect.hunger);
Entity.removeEffect(Player.getEntity(), MobEffect.movementSlowdown);
Entity.removeEffect(Player.getEntity(), MobEffect.poison);
Entity.removeEffect(Player.getEntity(), MobEffect.weakness);
}

if(fastladder) {
if(!Utils.Player.isFall() && !Entity.isSneaking(getPlayerEnt())) {
            if(getTile(getPlayerX(), getPlayerY() +1, getPlayerZ()) == 65){
                setVelY(getPlayerEnt(), ladderspeed);
            }
        }
}

if(onehit2) {
for(i = 0; i < 9; i++) {
if(Player.getInventorySlot(i) == "267") {
Player.setItemCustomName(i, "§aOneHit");
onehit2 = false;
}
}
if(i >= 9) {
i = 0;
}
}

if(safewalk == true) {
if(Utils.Player.isAtEdge() && Utils.Player.onGround2()){
        Entity.setSneaking(getPlayerEnt(), true);
}
}

if(namehide == true) {
Entity.setNameTag(getPlayerEnt(), nametag);
ModPE.langEdit(Player.getName(Player.getEntity()), nametag);
}
}

function startup() {
markfileCheck();
updateCheck();
premiumCheck();
textsizefileCheck();
clientStart();
}

if(archive.exists()) {
		 Utils.Render.init();
startup();
}

if(!archive.exists()) {
		 archive.mkdir();
startup();
}

function info(infomsg) {
	ctx.runOnUiThread(new Runnable({ run: function(){
        try{
            var othersg = new android.widget.LinearLayout(ctx);
            othersg.setOrientation(android.widget.LinearLayout.VERTICAL);
            var otherg = new Button(ctx);
            otherg.setText("Info\n\n\n\n\n" + infomsg + "\n\n\n\n");          
            otherg.setTextColor(Color.BLACK);
            otherg.setBackground(bttheme);
            otherg.getBackground().setAlpha(130);
            otherg.setGravity(Gravity.CENTER);
            otherg.setOnClickListener(new View.OnClickListener({

                onClick: function(viewarg){
                    GUI4g.dismiss();
                }}));
            othersg.addView(otherg, ctx.getWindowManager().getDefaultDisplay().getWidth()/1.5, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.9);


            GUI4g = new android.widget.PopupWindow(othersg, ctx.getWindowManager().getDefaultDisplay().getWidth()/1.5, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.9);
            GUI4g.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
           
GUI4g.setAnimationStyle(android.R.style.Animation_Toast);
 GUI4g.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);
        }catch(err){
            Toast.makeText(ctx, "An error occured: " + err, 1).show();
        }
    }}));
}

function error(errmsg) {
	ctx.runOnUiThread(new Runnable({ run: function(){
        try{
            var othersgg = new android.widget.LinearLayout(ctx);
            othersgg.setOrientation(android.widget.LinearLayout.VERTICAL);
            var othergg = new Button(ctx);
            othergg.setText("Error\n\n\n\n\n" + errmsg + "\n\n\n\n");          
            othergg.setTextColor(Color.YELLOW);
            othergg.setBackground(bttheme);
            othergg.getBackground().setAlpha(130);
            othergg.setGravity(Gravity.CENTER);
            othergg.setOnClickListener(new View.OnClickListener({
                onClick: function(viewarg){
                    GUI4gg.dismiss();
                }}));
            othersgg.addView(othergg, ctx.getWindowManager().getDefaultDisplay().getWidth()/1.5, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.9);


            GUI4gg = new android.widget.PopupWindow(othersgg, ctx.getWindowManager().getDefaultDisplay().getWidth()/1.5, ctx.getWindowManager().getDefaultDisplay().getHeight()/1.9);
            GUI4gg.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
           
GUI4gg.setAnimationStyle(android.R.style.Animation_Toast);
 GUI4gg.showAtLocation(ctx.getWindow().getDecorView(), android.view.Gravity.CENTER | android.view.Gravity.CENTER, 0, 0);
        }catch(err){
            Toast.makeText(ctx, "An error occured: " + err, 1).show();
        }
    }}));
}

function TeleportationBtn(){
	ctx.runOnUiThread(new Runnable({ run: function(){
	try{
	var TeleportationBtn1 = new android.widget.LinearLayout(ctx);
	TeleportationBtn1.setOrientation(1);
	TeleportationBtn1.setBackground(btbg);
	TeleportationBtn1.getBackground().setAlpha(150);

		var buttonTeleportation = new Button(ctx);
	buttonTeleportation.setText("TP");
	buttonTeleportation.setPadding(0, 0, 0, 0);
buttonTeleportation.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
					teleport = true;
				}}));

buttonTeleportation.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
showtp = true;
return true;
 }
}));
	buttonTeleportation.setBackground(nothing ? btbg3 : btbg3);
				TeleportationBtn1.addView(buttonTeleportation, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

Teleportationbtnmenu1 = new PopupWindow(TeleportationBtn1, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, ctx.getWindowManager().getDefaultDisplay().getHeight()/11);
	
		Teleportationbtnmenu1.setAnimationStyle(android.R.style.Animation_Toast);
	Teleportationbtnmenu1.showAtLocation(ctx.getWindow().getDecorView(), Gravity.BOTTOM | Gravity.RIGHT, 0, 0);
			}catch(error){
				Toast.makeText(ctx, "An error occured: " + error, 1).show();
			}
	}}));
}

function SearchBtn() {
	ctx.runOnUiThread(new Runnable({ run: function(){
	try{
	var SearchBtn1 = new android.widget.LinearLayout(ctx);
	SearchBtn1.setOrientation(1);
	SearchBtn1.setBackground(btbg);
	SearchBtn1.getBackground().setAlpha(150);

		var buttonSearch = new Button(ctx);
	buttonSearch.setText("Search");
	buttonSearch.setPadding(0, 0, 0, 0);
buttonSearch.setOnClickListener(new View.OnClickListener({
				onClick: function(viewarg){
					var players = Server.getAllPlayers();
        for(i = 0; i < players.length; i++) {
      if(Player.getName(Player.getEntity()) != Player.getName(players[i])) {
       ModPE.setCamera(players[i]);
      infinityplayer = Player.getName(players[i]);
ModPE.showTipMessage("§7Playername:§9 " + Player.getName(players[i]));
}
}
				}}));

buttonSearch.setOnLongClickListener(new android.view.View.OnLongClickListener({
 onLongClick: function(a, b) {
ModPE.setCamera(Player.getEntity());
return true;
 }
}));
	buttonSearch.setBackground(nothing ? btbg3 : btbg3);
				SearchBtn1.addView(buttonSearch, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, 100);

Searchbtnmenu1 = new PopupWindow(SearchBtn1, ctx.getWindowManager().getDefaultDisplay().getWidth()/7.2, ctx.getWindowManager().getDefaultDisplay().getHeight()/11);
	
		Searchbtnmenu1.setAnimationStyle(android.R.style.Animation_Toast);
	Searchbtnmenu1.showAtLocation(ctx.getWindow().getDecorView(), Gravity.BOTTOM | Gravity.RIGHT, 0, 0);
			}catch(error){
				Toast.makeText(ctx, "An error occured: " + error, 1).show();
			}
	}}));
}


ctx.runOnUiThread(new Runnable({ run: function(){
	try{
layoutarray = new LinearLayout(ctx);
		layoutarray.setOrientation(1);    

arrayname1 = new TextView(ctx);
arrayname1.setTextSize(16);
arrayname1.setTextColor(Color.BLACK);
arrayname1.setBackground(arraytheme);
arrayname1.setGravity(Gravity.CENTER);
arrayname1.setText("  Longjump  ");

arrayname2 = new TextView(ctx);
arrayname2.setTextSize(16);
arrayname2.setTextColor(Color.BLACK);
arrayname2.setBackground(arraytheme);
arrayname2.setGravity(Gravity.CENTER);
arrayname2.setText("  Step  ");

arrayname3 = new TextView(ctx);
arrayname3.setTextSize(16);
arrayname3.setTextColor(Color.BLACK);
arrayname3.setBackground(arraytheme);
arrayname3.setGravity(Gravity.CENTER);
arrayname3.setText("  Fastladder  ");

arrayname4 = new TextView(ctx);
arrayname4.setTextSize(16);
arrayname4.setTextColor(Color.BLACK);
arrayname4.setBackground(arraytheme);
arrayname4.setGravity(Gravity.CENTER);
arrayname4.setText("  Jesus  ");

arrayname5 = new TextView(ctx);
arrayname5.setTextSize(16);
arrayname5.setTextColor(Color.BLACK);
arrayname5.setBackground(arraytheme);
arrayname5.setGravity(Gravity.CENTER);
arrayname5.setText("  Nofall  ");

arrayname6 = new TextView(ctx);
arrayname6.setTextSize(16);
arrayname6.setTextColor(Color.BLACK);
arrayname6.setBackground(arraytheme);
arrayname6.setGravity(Gravity.CENTER);
arrayname6.setText("   Glide   ");

arrayname7 = new TextView(ctx);
arrayname7.setTextSize(16);
arrayname7.setTextColor(Color.BLACK);
arrayname7.setBackground(arraytheme);
arrayname7.setGravity(Gravity.CENTER);
arrayname7.setText("    Spam    ");

arrayname8 = new TextView(ctx);
arrayname8.setTextSize(16);
arrayname8.setTextColor(Color.BLACK);
arrayname8.setBackground(arraytheme);
arrayname8.setGravity(Gravity.CENTER);
arrayname8.setText("  Namehide  ");

arrayname9 = new TextView(ctx);
arrayname9.setTextSize(16);
arrayname9.setTextColor(Color.BLACK);
arrayname9.setBackground(arraytheme);
arrayname9.setGravity(Gravity.CENTER);
arrayname9.setText("  Safewalk  ");

arrayname10 = new TextView(ctx);
arrayname10.setTextSize(16);
arrayname10.setTextColor(Color.BLACK);
arrayname10.setBackground(arraytheme);
arrayname10.setGravity(Gravity.CENTER);
arrayname10.setText("  Derp  ");

arrayname11 = new TextView(ctx);
arrayname11.setTextSize(16);
arrayname11.setTextColor(Color.BLACK);
arrayname11.setBackground(arraytheme);
arrayname11.setGravity(Gravity.CENTER);
arrayname11.setText("  Tower  ");

arrayname12 = new TextView(ctx);
arrayname12.setTextSize(16);
arrayname12.setTextColor(Color.BLACK);
arrayname12.setBackground(arraytheme);
arrayname12.setGravity(Gravity.CENTER);
arrayname12.setText("  Scaffold  ");

arrayname13 = new TextView(ctx);
arrayname13.setTextSize(16);
arrayname13.setTextColor(Color.BLACK);
arrayname13.setBackground(arraytheme);
arrayname13.setGravity(Gravity.CENTER);
arrayname13.setText("  Aura  ");

arrayname14 = new TextView(ctx);
arrayname14.setTextSize(16);
arrayname14.setTextColor(Color.BLACK);
arrayname14.setBackground(arraytheme);
arrayname14.setGravity(Gravity.CENTER);
arrayname14.setText("  Hitbox  ");

arrayname15 = new TextView(ctx);
arrayname15.setTextSize(16);
arrayname15.setTextColor(Color.BLACK);
arrayname15.setBackground(arraytheme);
arrayname15.setGravity(Gravity.CENTER);
arrayname15.setText("  Teams  ");

arrayname16 = new TextView(ctx);
arrayname16.setTextSize(16);

arrayname16.setTextColor(Color.BLACK);
arrayname16.setBackground(arraytheme);
arrayname16.setGravity(Gravity.CENTER);
arrayname16.setText(" Esp ");

arrayname17 = new TextView(ctx);
arrayname17.setTextSize(16);
arrayname17.setTextColor(Color.BLACK);
arrayname17.setBackground(arraytheme);
arrayname17.setGravity(Gravity.CENTER);
arrayname17.setText(" Speed ");

arrayname18 = new TextView(ctx);
arrayname18.setTextSize(16);
arrayname18.setTextColor(Color.BLACK);
arrayname18.setBackground(arraytheme);
arrayname18.setGravity(Gravity.CENTER);
arrayname18.setText(" Teleport ");

arrayname19 = new TextView(ctx);
arrayname19.setTextSize(16);
arrayname19.setTextColor(Color.BLACK);
arrayname19.setBackground(arraytheme);
arrayname19.setGravity(Gravity.CENTER);
arrayname19.setText(" InfinityReach ");

arrayname20 = new TextView(ctx);
arrayname20.setTextSize(16);
arrayname20.setTextColor(Color.BLACK);
arrayname20.setBackground(arraytheme);
arrayname20.setGravity(Gravity.CENTER);
arrayname20.setText(" Velocity ");

arrayname21 = new TextView(ctx);
arrayname21.setTextSize(16);
arrayname21.setTextColor(Color.BLACK);
arrayname21.setBackground(arraytheme);
arrayname21.setGravity(Gravity.CENTER);
arrayname21.setText(" AntiEffects ");

arrayname22 = new TextView(ctx);
arrayname22.setTextSize(16);
arrayname22.setTextColor(Color.BLACK);
arrayname22.setBackground(arraytheme);
arrayname22.setGravity(Gravity.CENTER);
arrayname22.setText(" Brightness ");

arrayname23 = new TextView(ctx);
arrayname23.setTextSize(16);
arrayname23.setTextColor(Color.BLACK);
arrayname23.setBackground(arraytheme);
arrayname23.setGravity(Gravity.CENTER);
arrayname23.setText(" Blockfinder ");

   GUIarray = new PopupWindow(layoutarray, RelativeLayout.LayoutParams.WRAP_CONTENT,     RelativeLayout.LayoutParams.WRAP_CONTENT);
		GUIarray.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
	
GUIarray.setAnimationStyle(android.R.style.Animation_InputMethod);
	GUIarray.showAtLocation(ctx.getWindow().getDecorView(), Gravity.RIGHT | Gravity.TOP, 0, 0);
		
		}catch(err){
			Toast.makeTextQ(ctx, "An error occured: " + err, 1).show();
		}
	}}));

function screenChangeHook(screen) {
if(screen != "hud_screen" && ambienclosed2 == false) {
ctx.runOnUiThread(new java.lang.Runnable({ run: function(){
ambienclosed2 = true;
ClosePlayer();
CloseMovement();
CloseRender();
CloseCombat();
CloseOther();
GUIwatermark.dismiss();
}}));
} 

if(screen == "hud_screen" && ambienclosed2 == true) {
ctx.runOnUiThread(new java.lang.Runnable({ run: function(){
ambienclosed2 = false;
clientStart();
}}));
}
if(screen == "enchanting_screen") {
if(banitem == true) {
for(i = 0; i < 9; i++) {
if(Player.getInventorySlot(i) == "276") {
Player.enchant(i, Enchantment.SHARPNESS, 10000);
Player.setItemCustomName(i, "§aOneHit");
banitem = false;
}
}
}
}
}
      
function destroyBlock(x, y, z, side) {
	if(onehit == true) {
			if(getTile(x, y, z).toString() == "54") {
			onehit2 = true;
      onehit = false;
}
}
}
